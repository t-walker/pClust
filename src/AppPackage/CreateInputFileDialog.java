/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AppPackage;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RootPaneContainer;

/**
 *
 * @author Svetlana
 */
public class CreateInputFileDialog extends javax.swing.JDialog {

    /**
     * Creates new form CreateInputFileDialog
     */
    public CreateInputFileDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.outputFileName = "JoinedFastaFile.faa";
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("spiral_logo.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSelectFiles = new javax.swing.JLabel();
        txtSelectFiles = new javax.swing.JTextField();
        btnSelectFiles = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        lblSelectOutputDir = new javax.swing.JLabel();
        txtSelectOutputDir = new javax.swing.JTextField();
        btnSelectOutputDir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaTest = new javax.swing.JTextArea();
        txtOutputFileName = new javax.swing.JTextField();
        lblOutputFileName = new javax.swing.JLabel();
        txtOutputFileCopy = new javax.swing.JTextField();
        lblOutputFileNameCopy = new javax.swing.JLabel();
        lblSelectFiles1 = new javax.swing.JLabel();
        txtSelectFiles1 = new javax.swing.JTextField();
        btnSelectFiles1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Joined FASTA File");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSelectFiles.setText("Select fasta files to join:");
        getContentPane().add(lblSelectFiles, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        getContentPane().add(txtSelectFiles, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 390, -1));

        btnSelectFiles.setText("Browse");
        btnSelectFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFilesActionPerformed(evt);
            }
        });
        getContentPane().add(btnSelectFiles, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, 80, -1));

        btnProcess.setText("Join Files");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        getContentPane().add(btnProcess, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 180, 200, 40));

        lblSelectOutputDir.setText("Select folder for storing the output file:");
        getContentPane().add(lblSelectOutputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));
        getContentPane().add(txtSelectOutputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 390, -1));

        btnSelectOutputDir.setText("Browse");
        btnSelectOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectOutputDirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSelectOutputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 90, 80, -1));

        txtAreaTest.setColumns(20);
        txtAreaTest.setRows(5);
        jScrollPane1.setViewportView(txtAreaTest);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 500, 230));

        txtOutputFileName.setText("JoinedFastaFile.faa");
        txtOutputFileName.setAutoscrolls(false);
        txtOutputFileName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtOutputFileNameKeyReleased(evt);
            }
        });
        getContentPane().add(txtOutputFileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 480, 20));

        lblOutputFileName.setText("Enter output file name:");
        getContentPane().add(lblOutputFileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 210, -1));

        txtOutputFileCopy.setEditable(false);
        txtOutputFileCopy.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtOutputFileCopy.setText(txtOutputFileName.getText());
        getContentPane().add(txtOutputFileCopy, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 170, -1));

        lblOutputFileNameCopy.setText("Your output file name is:");
        getContentPane().add(lblOutputFileNameCopy, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 170, -1));

        lblSelectFiles1.setText("Select fasta files to join:");
        getContentPane().add(lblSelectFiles1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        getContentPane().add(txtSelectFiles1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 390, -1));

        btnSelectFiles1.setText("Browse");
        btnSelectFiles1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFiles1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnSelectFiles1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, 80, -1));

        setSize(new java.awt.Dimension(518, 501));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFilesActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
//        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        fc.setCurrentDirectory(new File("."+ File.separator + "Resources"));
        // Allow to open only files
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // Allow to select multiple files.
        fc.setMultiSelectionEnabled(true);

        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        int i;
        String fileNames = "";

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Store selected files in the private variable files
            this.files = fc.getSelectedFiles();
            // Display the selected files
            for(i = 0; i < this.files.length; i++){
                fileNames += "\"" + this.files[i].getName() + "\" ";
            }
            this.txtSelectFiles.setText(fileNames);

            // Debuging display
            this.txtAreaTest.append("Selected input files:" + this.newline);
            for(i = 0; i < this.files.length; i++){
                this.txtAreaTest.append(this.files[i].getAbsolutePath() + this.newline);
            }
        }
        else{
            this.txtAreaTest.append("User canceled action" + this.newline + this.newline);
            this.txtSelectFiles.setText("");
        }
        this.lblSelectFiles.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnSelectFilesActionPerformed

    public String showDialog(){
        this.setVisible(true);
        return this.outputFileCompleteName;
    }
    /**
     * This method turns a normal cursor into the waiting cursor shape.
     * Use this method only in conjuction with stopWaitCursor() method.
     */
    public void startWaitCursor() {
        RootPaneContainer root = (RootPaneContainer) this.getRootPane().getTopLevelAncestor();
        root.getGlassPane().setCursor(
                Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        root.getGlassPane().setVisible(true);
    }

    /**
     * This method turns a waiting cursor into the normal cursor shape.
     * Use this method only in conjuction with startWaitCursor() method.
     */
    public void stopWaitCursor() {
        RootPaneContainer root = (RootPaneContainer) this.getRootPane().getTopLevelAncestor();
        root.getGlassPane().setCursor(
                Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        root.getGlassPane().setVisible(false);
    }

    private void wrapperForProcessFastaFile(File outFile){

        // Prepare different local variables
        this.txtAreaTest.append("Output file: " + outFile.getAbsolutePath() + this.newline);

        OutputStream out = null;
        byte[] buf = new byte[1024];
        int i;
        int b;
        
        startWaitCursor();
        
        try {
            out = new FileOutputStream(outFile);
            for (i = 0; i < this.files.length; i++) {
                InputStream in = new FileInputStream(this.files[i]);
                while ( (b = in.read(buf)) >= 0) {
                    out.write(buf, 0, b);
                    out.flush();
                }
                in.close();
            }
            JOptionPane.showMessageDialog(this, "File " + this.outputFileName + " created successfully",
                    "File created successfully", JOptionPane.INFORMATION_MESSAGE);
            this.lblOutputFileName.setForeground(Color.BLACK);
            this.lblSelectFiles.setForeground(Color.BLACK);
            this.lblSelectOutputDir.setForeground(Color.BLACK);
            this.outputFileCompleteName = outFile.getAbsolutePath();
        } catch (Exception e) {
//            System.err.format("Exception 1: %s%n", e);
            JOptionPane.showMessageDialog(this, 
                        "Could Not Find Input File(s). Make sure the specified file(s) exist."
                                + this.newline + "Showing system diagnostic message:"
                                + this.newline + e, 
                        "Could Not Find Input File(s)", JOptionPane.ERROR_MESSAGE);
            this.lblSelectFiles.setForeground(Color.red);
            this.txtSelectFiles.setCaretPosition(0);
            this.txtSelectFiles.setText("");
            this.txtSelectFiles.requestFocusInWindow();
        }finally{
            // This try-catch catches an IOException of writer.close()
            try{
                out.close();
            }catch(Exception e){
                //System.err.format("Exception 2: %s%n", e);
                JOptionPane.showMessageDialog(this, 
                        "Could not close BufferedWriter. Showing system diagnostic message:"
                                + this.newline + e + this.newline
                                + "Close and restart this program.", 
                        "System Failure", JOptionPane.ERROR_MESSAGE);
            }
        }
        stopWaitCursor();
    }

    
    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // Re-intiate label colors
        this.lblSelectFiles.setForeground(Color.BLACK);
        this.lblSelectOutputDir.setForeground(Color.BLACK);

        // Prepare the output file
        File outFile = new File(this.outputDir + File.separator + this.outputFileName);

        try{
            boolean flag = outFile.createNewFile();
            // 1. If-clause: were able to create the specified output file
            if(flag == true){
                wrapperForProcessFastaFile(outFile);
            }
            // 2. Else-clause: were not able to create the specified file.
            // The only assumed reason for that is that the file with such name already exists.
            else{
                int userResponse = JOptionPane.showConfirmDialog(this, "File "
                    + this.outputFileName + " already exists. Do you want to overwrite it?",
                    "File Already Exists", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                // Option 1: User wants to overwrite the existing file
                if(userResponse == JOptionPane.YES_OPTION){
                    try{
                        outFile.delete();
                    }catch(Exception e){
                        //                        System.err.format("Exception 7: %s%n", e);
                        JOptionPane.showMessageDialog(this,
                            "Could not delete the file. Make sure the file exists and is closed."
                            + this.newline +  "Showing Exception 7 message: " + e,
                            "Could Not Delete File", JOptionPane.ERROR_MESSAGE);
                    }
                    flag = outFile.createNewFile();
                    if(flag == true){
                        wrapperForProcessFastaFile(outFile);
                    }
                    else{ // Could not create the new file!!
                        JOptionPane.showMessageDialog(this,
                            "Could not create the file. Close and restart this program.",
                            "Could Not Create File", JOptionPane.ERROR_MESSAGE);
                    }
                }
                // Option 2: User does not want to overwrite the existing file
                if(userResponse == JOptionPane.NO_OPTION){
                    this.lblOutputFileName.setForeground(Color.red);
                    this.txtOutputFileName.setText("");
                    this.txtOutputFileName.setCaretPosition(0);
                    this.txtOutputFileName.requestFocusInWindow();
                }
            }
        }catch(IOException | HeadlessException e){
            //            System.err.format("Exception 3: %s%n", e);
            JOptionPane.showMessageDialog(this,
                "Please select the output folder." + this.newline + "Showing Exception 3:" + this.newline + e,
                "Could Not Create File", JOptionPane.ERROR_MESSAGE);
            this.lblSelectOutputDir.setForeground(Color.red);
            this.txtSelectOutputDir.setText("");
            this.txtSelectOutputDir.setCaretPosition(0);
            this.txtSelectOutputDir.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnSelectOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectOutputDirActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
        fc.setCurrentDirectory(null);
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.outputDir = fc.getSelectedFile();
            this.txtSelectOutputDir.setText(this.outputDir.getAbsolutePath());
            this.txtAreaTest.append("Selected output directory:"  + this.newline
                + this.outputDir.getAbsolutePath() + this.newline + this.newline);
        }
        else{
            this.txtAreaTest.append("User canceled action" + this.newline + this.newline);
            this.txtSelectOutputDir.setText("");
        }
        this.lblSelectOutputDir.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnSelectOutputDirActionPerformed

    private void txtOutputFileNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOutputFileNameKeyReleased
        this.outputFileName = this.txtOutputFileName.getText();
        this.txtOutputFileCopy.setText(this.outputFileName);
    }//GEN-LAST:event_txtOutputFileNameKeyReleased

    private void btnSelectFiles1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFiles1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSelectFiles1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateInputFileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateInputFileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateInputFileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateInputFileDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CreateInputFileDialog dialog = new CreateInputFileDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnSelectFiles;
    private javax.swing.JButton btnSelectFiles1;
    private javax.swing.JButton btnSelectOutputDir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblOutputFileName;
    private javax.swing.JLabel lblOutputFileNameCopy;
    private javax.swing.JLabel lblSelectFiles;
    private javax.swing.JLabel lblSelectFiles1;
    private javax.swing.JLabel lblSelectOutputDir;
    private javax.swing.JTextArea txtAreaTest;
    private javax.swing.JTextField txtOutputFileCopy;
    private javax.swing.JTextField txtOutputFileName;
    private javax.swing.JTextField txtSelectFiles;
    private javax.swing.JTextField txtSelectFiles1;
    private javax.swing.JTextField txtSelectOutputDir;
    // End of variables declaration//GEN-END:variables

    private File[] files; // stores array of FASTA files
    private File outputDir; // stores user specified directory
    private String outputFileName; 
    // System-independent newline character
//    private final  String newline = System.getProperty("line.separator");
    private final  String newline = "\n";
    // Return values on closing event to the main frame
    public int finalTotalSeq;
    public String outputFileCompleteName;
}
