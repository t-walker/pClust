/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AppPackage;

import java.awt.Color;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RootPaneContainer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Svetlana
 */
public class GrappoloFrame extends javax.swing.JFrame {

    /**
     * Creates new form GrappoloFrame
     */
    public GrappoloFrame() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("grapes_small.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prRdGroupChooseInputFile = new javax.swing.ButtonGroup();
        prRdGroupSelectWeight = new javax.swing.ButtonGroup();
        prRdGroupChooseGrappoloInputFile = new javax.swing.ButtonGroup();
        prRdGroupColoringMap = new javax.swing.ButtonGroup();
        prRdGroupPrint = new javax.swing.ButtonGroup();
        prTabbedPaneGrappolo = new javax.swing.JTabbedPane();
        prPanelMakeInputGrap = new javax.swing.JPanel();
        prRdCSVjustCreated = new javax.swing.JRadioButton();
        prRdCSVcreatedBefore = new javax.swing.JRadioButton();
        prTxtInputFileJustCreated = new javax.swing.JTextField();
        prTxtInputFileCreatedBefore = new javax.swing.JTextField();
        btnChooseInputCsv = new javax.swing.JButton();
        btnMakeFile = new javax.swing.JButton();
        lblSelectWeight = new javax.swing.JLabel();
        prRdLengthMaxLength = new javax.swing.JRadioButton();
        prRdMatchesLength = new javax.swing.JRadioButton();
        prRdScoreSelfScore = new javax.swing.JRadioButton();
        prTxtOutputDirForGrappoloInputFile = new javax.swing.JTextField();
        btnOutputDir = new javax.swing.JButton();
        lblOutputDirForGrappoloInputFile = new javax.swing.JLabel();
        lblGrappoloInputFile = new javax.swing.JLabel();
        prTxtGrappoloInputFile = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        prTxtAreaMkFile = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        prChBoxShowOutputMakeFile = new javax.swing.JCheckBox();
        btnIcon = new javax.swing.JButton();
        prPanelRunGrappolo = new javax.swing.JPanel();
        prChkBoxStrongScaling = new javax.swing.JCheckBox();
        prChkBoxVF = new javax.swing.JCheckBox();
        prChkBoxShowOutputGrappolo = new javax.swing.JCheckBox();
        lblMinSize = new javax.swing.JLabel();
        lblCthreshold = new javax.swing.JLabel();
        prTxtMinSize = new javax.swing.JTextField();
        prTxtCthreshold = new javax.swing.JTextField();
        lblThreshold = new javax.swing.JLabel();
        prTxtThreshold = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        prTxtArea = new javax.swing.JTextArea();
        btnGrappolo = new javax.swing.JButton();
        prTxtGrappoloInputFileCopy = new javax.swing.JTextField();
        prTxtGrappoloOutputFile = new javax.swing.JTextField();
        lblGrappoloOutputFile = new javax.swing.JLabel();
        btnOutputDirGrappolo = new javax.swing.JButton();
        prTxtOutputDirForGrappoloFile = new javax.swing.JTextField();
        lblOutputDirForGrappoloFile = new javax.swing.JLabel();
        prRdUseGrappoloInputFileJustCreated = new javax.swing.JRadioButton();
        prRdUseGrappoloInputFileCreatedBefore = new javax.swing.JRadioButton();
        prTxtSelectGrappoloInputFile = new javax.swing.JTextField();
        btnChooseInputGrap = new javax.swing.JButton();
        btnClearOutput = new javax.swing.JButton();
        prRdColoring = new javax.swing.JRadioButton();
        prRdMap = new javax.swing.JRadioButton();
        prChBoxColorMap = new javax.swing.JCheckBox();
        btnIcon1 = new javax.swing.JButton();
        prPanelProcessGrappoloOutput = new javax.swing.JPanel();
        prTxtOriginalFastaFile = new javax.swing.JTextField();
        lblOriginalFastaFile = new javax.swing.JLabel();
        prTxtGrappoloAssociatedFile = new javax.swing.JTextField();
        lblGrappoloAssociatedFile = new javax.swing.JLabel();
        btnChooseOrigFastaFile = new javax.swing.JButton();
        btnChooseAssocGrapFile = new javax.swing.JButton();
        lblGrappoloAssociatedOutputInfo = new javax.swing.JLabel();
        lblOrigFastaInfo = new javax.swing.JLabel();
        btnProcessGrappoloOutput = new javax.swing.JButton();
        prChkBoxShowOutputProcessGrappolo = new javax.swing.JCheckBox();
        btnClearOutputGrap = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        prTxtAreaProcessOutput = new javax.swing.JTextArea();
        btnIcon2 = new javax.swing.JButton();
        lblOutputDirForFinalFile = new javax.swing.JLabel();
        prTxtOutputDirForFinalFile = new javax.swing.JTextField();
        btnOutputDirFinalFile = new javax.swing.JButton();
        lblFinalFile = new javax.swing.JLabel();
        prTxtFinalFile = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        prRdSingles = new javax.swing.JRadioButton();
        prRdNonSingles = new javax.swing.JRadioButton();
        prRdPrintAll = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Grappolo");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        prTabbedPaneGrappolo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        prTabbedPaneGrappolo.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent e){
                //System.out.println(""+prTabbedPaneGrappolo.getSelectedIndex());
                if(prTabbedPaneGrappolo.getSelectedIndex() == 1){
                    // Call the processing function
                    processRunGrappoloTabClick();
                }
                if(prTabbedPaneGrappolo.getSelectedIndex() == 2){
                    // Call the processing function
                    processOnTab3Click();
                }
            }
        });

        prPanelMakeInputGrap.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        prRdGroupChooseInputFile.add(prRdCSVjustCreated);
        prRdCSVjustCreated.setSelected(true);
        prRdCSVjustCreated.setText("Use the edge file just created: ");
        prRdCSVjustCreated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prRdCSVjustCreatedActionPerformed(evt);
            }
        });
        prPanelMakeInputGrap.add(prRdCSVjustCreated, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 290, -1));

        prRdGroupChooseInputFile.add(prRdCSVcreatedBefore);
        prRdCSVcreatedBefore.setText("Or use an edge file created before:");
        prRdCSVcreatedBefore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prRdCSVcreatedBeforeActionPerformed(evt);
            }
        });
        prPanelMakeInputGrap.add(prRdCSVcreatedBefore, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 300, -1));

        prTxtInputFileJustCreated.setEditable(false);
        prPanelMakeInputGrap.add(prTxtInputFileJustCreated, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 340, -1));

        prTxtInputFileCreatedBefore.setEnabled(false);
        prPanelMakeInputGrap.add(prTxtInputFileCreatedBefore, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 340, -1));

        btnChooseInputCsv.setText("Browse");
        btnChooseInputCsv.setEnabled(false);
        btnChooseInputCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseInputCsvActionPerformed(evt);
            }
        });
        prPanelMakeInputGrap.add(btnChooseInputCsv, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 100, 80, -1));

        btnMakeFile.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnMakeFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/grappolo_button.png"))); // NOI18N
        btnMakeFile.setText("Make Grappolo Input File");
        btnMakeFile.setToolTipText("");
        btnMakeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeFileActionPerformed(evt);
            }
        });
        prPanelMakeInputGrap.add(btnMakeFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, 230, 50));

        lblSelectWeight.setBorder(javax.swing.BorderFactory.createTitledBorder("Select number for weight"));
        prPanelMakeInputGrap.add(lblSelectWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 510, 50));

        prRdGroupSelectWeight.add(prRdLengthMaxLength);
        prRdLengthMaxLength.setSelected(true);
        prRdLengthMaxLength.setText("length/max_length");
        prPanelMakeInputGrap.add(prRdLengthMaxLength, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        prRdGroupSelectWeight.add(prRdMatchesLength);
        prRdMatchesLength.setText("matches/length");
        prPanelMakeInputGrap.add(prRdMatchesLength, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, -1, -1));

        prRdGroupSelectWeight.add(prRdScoreSelfScore);
        prRdScoreSelfScore.setText("score/self_score ");
        prPanelMakeInputGrap.add(prRdScoreSelfScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, -1, -1));

        prTxtOutputDirForGrappoloInputFile.setToolTipText("Select folder");
        prPanelMakeInputGrap.add(prTxtOutputDirForGrappoloInputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 190, -1));

        btnOutputDir.setText("Browse");
        btnOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputDirActionPerformed(evt);
            }
        });
        prPanelMakeInputGrap.add(btnOutputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, -1, -1));

        lblOutputDirForGrappoloInputFile.setText("Select folder for graph file:");
        lblOutputDirForGrappoloInputFile.setToolTipText("");
        prPanelMakeInputGrap.add(lblOutputDirForGrappoloInputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        lblGrappoloInputFile.setText("Enter name for graph file:");
        prPanelMakeInputGrap.add(lblGrappoloInputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 190, -1));

        prTxtGrappoloInputFile.setText("input.graph");
        prTxtGrappoloInputFile.setToolTipText("");
        prTxtGrappoloInputFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                prTxtGrappoloInputFileKeyReleased(evt);
            }
        });
        prPanelMakeInputGrap.add(prTxtGrappoloInputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 150, -1));

        prTxtAreaMkFile.setColumns(20);
        prTxtAreaMkFile.setRows(5);
        jScrollPane2.setViewportView(prTxtAreaMkFile);

        prPanelMakeInputGrap.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 510, 110));

        btnClear.setText("Clear output window");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        prPanelMakeInputGrap.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 263, 180, 30));

        prChBoxShowOutputMakeFile.setSelected(true);
        prChBoxShowOutputMakeFile.setText("Show diagnostic messages");
        prPanelMakeInputGrap.add(prChBoxShowOutputMakeFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 233, -1, 30));

        btnIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/grapes_small.png"))); // NOI18N
        btnIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIconActionPerformed(evt);
            }
        });
        prPanelMakeInputGrap.add(btnIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(363, 0, 80, 80));

        prTabbedPaneGrappolo.addTab("Make Grappolo Input File", prPanelMakeInputGrap);

        prPanelRunGrappolo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        prChkBoxStrongScaling.setText("Strong Scaling");
        prPanelRunGrappolo.add(prChkBoxStrongScaling, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, -1, -1));

        prChkBoxVF.setText("Vertex following");
        prChkBoxVF.setEnabled(false);
        prPanelRunGrappolo.add(prChkBoxVF, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, -1, -1));

        prChkBoxShowOutputGrappolo.setSelected(true);
        prChkBoxShowOutputGrappolo.setText("Show diagnostic messages");
        prPanelRunGrappolo.add(prChkBoxShowOutputGrappolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 180, -1, -1));

        lblMinSize.setText("Min Size");
        lblMinSize.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        prPanelRunGrappolo.add(lblMinSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 60, 20));

        lblCthreshold.setText("C-threshold");
        lblCthreshold.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        prPanelRunGrappolo.add(lblCthreshold, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, 20));

        prTxtMinSize.setText("100000");
        prPanelRunGrappolo.add(prTxtMinSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 70, -1));

        prTxtCthreshold.setText("0.01");
        prPanelRunGrappolo.add(prTxtCthreshold, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 70, -1));

        lblThreshold.setText("Threshold");
        lblThreshold.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        prPanelRunGrappolo.add(lblThreshold, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 80, 20));

        prTxtThreshold.setText("0.000001");
        prPanelRunGrappolo.add(prTxtThreshold, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 70, -1));

        prTxtArea.setColumns(20);
        prTxtArea.setRows(5);
        jScrollPane1.setViewportView(prTxtArea);

        prPanelRunGrappolo.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 510, 130));

        btnGrappolo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnGrappolo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/grappolo_button.png"))); // NOI18N
        btnGrappolo.setToolTipText("");
        btnGrappolo.setLabel("Run Grappolo");
        btnGrappolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrappoloActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(btnGrappolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 240, 150, 30));

        prTxtGrappoloInputFileCopy.setEditable(false);
        prTxtGrappoloInputFileCopy.setToolTipText("");
        prPanelRunGrappolo.add(prTxtGrappoloInputFileCopy, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 340, -1));

        prTxtGrappoloOutputFile.setText("ClusterInfo.grap");
        prTxtGrappoloOutputFile.setToolTipText("");
        prPanelRunGrappolo.add(prTxtGrappoloOutputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 150, -1));

        lblGrappoloOutputFile.setText("Enter name for cluster file:");
        prPanelRunGrappolo.add(lblGrappoloOutputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 180, -1));

        btnOutputDirGrappolo.setText("Browse");
        btnOutputDirGrappolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputDirGrappoloActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(btnOutputDirGrappolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, -1, -1));

        prTxtOutputDirForGrappoloFile.setToolTipText("Select folder");
        prPanelRunGrappolo.add(prTxtOutputDirForGrappoloFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 190, -1));

        lblOutputDirForGrappoloFile.setText("Select output folder for cluster file:");
        prPanelRunGrappolo.add(lblOutputDirForGrappoloFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        prRdGroupChooseGrappoloInputFile.add(prRdUseGrappoloInputFileJustCreated);
        prRdUseGrappoloInputFileJustCreated.setSelected(true);
        prRdUseGrappoloInputFileJustCreated.setText("Use your just created graph file:");
        prRdUseGrappoloInputFileJustCreated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prRdUseGrappoloInputFileJustCreatedActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(prRdUseGrappoloInputFileJustCreated, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        prRdGroupChooseGrappoloInputFile.add(prRdUseGrappoloInputFileCreatedBefore);
        prRdUseGrappoloInputFileCreatedBefore.setText("Or choose previously created graph file:");
        prRdUseGrappoloInputFileCreatedBefore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prRdUseGrappoloInputFileCreatedBeforeActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(prRdUseGrappoloInputFileCreatedBefore, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        prTxtSelectGrappoloInputFile.setEnabled(false);
        prPanelRunGrappolo.add(prTxtSelectGrappoloInputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 340, -1));

        btnChooseInputGrap.setText("Browse");
        btnChooseInputGrap.setEnabled(false);
        btnChooseInputGrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseInputGrapActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(btnChooseInputGrap, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 100, 80, -1));

        btnClearOutput.setText("Clear output");
        btnClearOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOutputActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(btnClearOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 210, 150, -1));

        prRdGroupColoringMap.add(prRdColoring);
        prRdColoring.setSelected(true);
        prRdColoring.setText("Coloring");
        prPanelRunGrappolo.add(prRdColoring, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, -1, -1));

        prRdGroupColoringMap.add(prRdMap);
        prRdMap.setText("Map");
        prPanelRunGrappolo.add(prRdMap, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, -1, -1));

        prChBoxColorMap.setSelected(true);
        prChBoxColorMap.setText("Coloring/Map");
        prChBoxColorMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prChBoxColorMapActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(prChBoxColorMap, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, -1, -1));

        btnIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/grapes_small.png"))); // NOI18N
        btnIcon1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIcon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIcon1ActionPerformed(evt);
            }
        });
        prPanelRunGrappolo.add(btnIcon1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 80, 80));

        prTabbedPaneGrappolo.addTab("Run Grappolo", prPanelRunGrappolo);

        prPanelProcessGrappoloOutput.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        prPanelProcessGrappoloOutput.add(prTxtOriginalFastaFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 330, -1));

        lblOriginalFastaFile.setText("Fasta input file:");
        prPanelProcessGrappoloOutput.add(lblOriginalFastaFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 180, -1));
        prPanelProcessGrappoloOutput.add(prTxtGrappoloAssociatedFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 330, -1));

        lblGrappoloAssociatedFile.setText("Associated Grappolo output file:");
        prPanelProcessGrappoloOutput.add(lblGrappoloAssociatedFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 220, -1));

        btnChooseOrigFastaFile.setText("Browse");
        btnChooseOrigFastaFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseOrigFastaFileActionPerformed(evt);
            }
        });
        prPanelProcessGrappoloOutput.add(btnChooseOrigFastaFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 80, -1));

        btnChooseAssocGrapFile.setText("Browse");
        btnChooseAssocGrapFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseAssocGrapFileActionPerformed(evt);
            }
        });
        prPanelProcessGrappoloOutput.add(btnChooseAssocGrapFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 80, -1));

        lblGrappoloAssociatedOutputInfo.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblGrappoloAssociatedOutputInfo.setText("Total number of sequences: 0");
        prPanelProcessGrappoloOutput.add(lblGrappoloAssociatedOutputInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 330, 20));

        lblOrigFastaInfo.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblOrigFastaInfo.setText("Total number of sequences: 0");
        prPanelProcessGrappoloOutput.add(lblOrigFastaInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 330, 20));

        btnProcessGrappoloOutput.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnProcessGrappoloOutput.setText("Print");
        btnProcessGrappoloOutput.setActionCommand("Process Output");
        btnProcessGrappoloOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessGrappoloOutputActionPerformed(evt);
            }
        });
        prPanelProcessGrappoloOutput.add(btnProcessGrappoloOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, 90, 40));

        prChkBoxShowOutputProcessGrappolo.setSelected(true);
        prChkBoxShowOutputProcessGrappolo.setText("Show diagnostic messages");
        prPanelProcessGrappoloOutput.add(prChkBoxShowOutputProcessGrappolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 220, -1, -1));

        btnClearOutputGrap.setText("Clear output");
        btnClearOutputGrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOutputGrapActionPerformed(evt);
            }
        });
        prPanelProcessGrappoloOutput.add(btnClearOutputGrap, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 250, 150, -1));

        prTxtAreaProcessOutput.setColumns(20);
        prTxtAreaProcessOutput.setRows(5);
        jScrollPane3.setViewportView(prTxtAreaProcessOutput);

        prPanelProcessGrappoloOutput.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 430, 120));

        btnIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/grapes_small.png"))); // NOI18N
        btnIcon2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIcon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIcon2ActionPerformed(evt);
            }
        });
        prPanelProcessGrappoloOutput.add(btnIcon2, new org.netbeans.lib.awtextra.AbsoluteConstraints(363, 0, 80, 80));

        lblOutputDirForFinalFile.setText("Select output folder for processed file:");
        prPanelProcessGrappoloOutput.add(lblOutputDirForFinalFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        prTxtOutputDirForFinalFile.setToolTipText("Select folder");
        prPanelProcessGrappoloOutput.add(prTxtOutputDirForFinalFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 190, -1));

        btnOutputDirFinalFile.setText("Browse");
        btnOutputDirFinalFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputDirFinalFileActionPerformed(evt);
            }
        });
        prPanelProcessGrappoloOutput.add(btnOutputDirFinalFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 80, -1));

        lblFinalFile.setText("Enter name for processed file:");
        prPanelProcessGrappoloOutput.add(lblFinalFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 240, -1));

        prTxtFinalFile.setText("ClusterMembership.txt");
        prTxtFinalFile.setToolTipText("");
        prPanelProcessGrappoloOutput.add(prTxtFinalFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 260, -1));

        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select associated files"));
        prPanelProcessGrappoloOutput.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 350, 160));

        prRdGroupPrint.add(prRdSingles);
        prRdSingles.setText("Print singles");
        prPanelProcessGrappoloOutput.add(prRdSingles, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, -1, -1));

        prRdGroupPrint.add(prRdNonSingles);
        prRdNonSingles.setText("Non-singles");
        prPanelProcessGrappoloOutput.add(prRdNonSingles, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, -1, -1));

        prRdGroupPrint.add(prRdPrintAll);
        prRdPrintAll.setSelected(true);
        prRdPrintAll.setText("Print all");
        prPanelProcessGrappoloOutput.add(prRdPrintAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 140, -1, -1));

        prTabbedPaneGrappolo.addTab("Process Grappolo Output", prPanelProcessGrappoloOutput);

        getContentPane().add(prTabbedPaneGrappolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 460));

        setSize(new java.awt.Dimension(573, 499));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //// COMMON FUNCTIONS 
    private void chooseDirWrapper(javax.swing.JTextField prTxtField, javax.swing.JLabel lbl){
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
//        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        fc.setCurrentDirectory(null);
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            prTxtField.setText(selectedFile.getAbsolutePath());
//            this.prTxtOutputDirForGrappoloInputFile.setText(selectedFile.getAbsolutePath());
            //this.outputTextArea.append("User selected directory: " + selectedFile.getAbsolutePath()+ "\n\n");
        }
        else{
            //this.outputTextArea.append("User canceled action\n\n");
            prTxtField.setText("");             
        }
        // Re-intiate label colors
//        this.lblOutputDirForGrappoloInputFile.setForeground(Color.BLACK);        
        lbl.setForeground(Color.BLACK);
    }
    /**
     * This method turns a normal cursor into the waiting cursor shape.
     * Use this method only in conjuction with stopWaitCursor() method.
     */
    public void startWaitCursor() {
        RootPaneContainer root = (RootPaneContainer) this.getRootPane().getTopLevelAncestor();
        root.getGlassPane().setCursor(
                Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        root.getGlassPane().setVisible(true);
    }

    private void outputNotSelectedWarning(String msgMain, String msgTitle,
            javax.swing.JLabel lbl, javax.swing.JTextField txtField){
        if(txtField.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, msgMain, msgTitle, JOptionPane.WARNING_MESSAGE);
            lbl.setForeground(Color.red);
            getFieldFocus(txtField);
        }
    }
    /**
     * This method turns a waiting cursor into the normal cursor shape.
     * Use this method only in conjuction with startWaitCursor() method.
     */
    public void stopWaitCursor() {
        RootPaneContainer root = (RootPaneContainer) this.getRootPane().getTopLevelAncestor();
        root.getGlassPane().setCursor(
                Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        root.getGlassPane().setVisible(false);
    }
    
    // This function clears the textField, sets cursor at the beginning and focuses in 
    private void getFieldFocus(javax.swing.JTextField txt){
            txt.setText("");
            txt.setCaretPosition(0);
            txt.requestFocusInWindow();
    }
    
    /**
     * This function attempts to overwrite an existing file
     */
    private void tryOverwriteFile(String outputfilename, javax.swing.JTextField txt, javax.swing.JLabel lbl){
        // First check if the output with such a name already exists
        File out = new File(outputfilename);
        if(out.exists() && out.isFile()){
            int userResponse = JOptionPane.showConfirmDialog(this, "File "
                    + txt.getText() + " already exists. Do you want to overwrite it?",
                    "File Already Exists", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            // Option 1: User wants to overwrite the existing file
            if(userResponse == JOptionPane.YES_OPTION){
                // First, try to delete the original file
                try{
                    out.delete();
                }catch(Exception e){
                    JOptionPane.showMessageDialog(this, 
                    "Showing system diagnostic message of Exception 12:"
                            + this.newline + e + this.newline + 
                            "Could not delete file " + txt.getText() + ". Make sure the file exists and is closed.", 
                            "Could Not Delete File", JOptionPane.ERROR_MESSAGE);
                }                
            }
            // Option 2: User does not want to overwrite the existing file
            if(userResponse == JOptionPane.NO_OPTION){
                lbl.setForeground(Color.red);
                getFieldFocus(txt);
            }
        }        
        
    }
    //// END OF COMMON FUNCTIONS

    /**
     * Here begins TAB 1 - Make Grappolo Input File - functions and events 
     */    
    
    private void prRdCSVjustCreatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prRdCSVjustCreatedActionPerformed
        if(this.prRdCSVjustCreated.isSelected()){
            // Disable other related fields
            this.prTxtInputFileCreatedBefore.setEnabled(false);
            this.btnChooseInputCsv.setEnabled(false);
            // Enable related fields
            this.prRdCSVjustCreated.setSelected(true);
            this.prTxtInputFileJustCreated.setEnabled(true);
        }
    }//GEN-LAST:event_prRdCSVjustCreatedActionPerformed

    private void prRdCSVcreatedBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prRdCSVcreatedBeforeActionPerformed
        if(this.prRdCSVcreatedBefore.isSelected()){
            // Enable related fields
            this.prTxtInputFileCreatedBefore.setEnabled(true);
            this.btnChooseInputCsv.setEnabled(true);
            // Disable other related fields
            this.prRdCSVjustCreated.setSelected(false);
            this.prTxtInputFileJustCreated.setEnabled(false);
        }
    }//GEN-LAST:event_prRdCSVcreatedBeforeActionPerformed

    private void btnChooseInputCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseInputCsvActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Show only file with csv extention
        FileNameExtensionFilter ft = new FileNameExtensionFilter("pGraph Files *.csv", "csv");
        fc.setFileFilter(ft);
        // Set default directory
//        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        fc.setCurrentDirectory(null);
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            this.prTxtInputFileCreatedBefore.setText(selectedFile.getAbsolutePath());
            //this.outputTextArea.append("User selected directory: " + selectedFile.getAbsolutePath()+ "\n\n");
        }
        else{
            //this.outputTextArea.append("User canceled action\n\n");
            this.prTxtInputFileCreatedBefore.setText("");
        }
        // Re-intiate label colors
        this.prRdCSVcreatedBefore.setForeground(Color.BLACK);
        // For Windows
//        this.inputFileName = "\"" + this.prTxtInputFileCreatedBefore.getText() + "\"";
        this.inputFileName = this.prTxtInputFileCreatedBefore.getText();
        // For Mac/Unix
        //        this.inputFileName = this.prTxtInputFileCreatedBefore.getText().replace(' ', '*');
    }//GEN-LAST:event_btnChooseInputCsvActionPerformed

    private void btnOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputDirActionPerformed
        chooseDirWrapper(this.prTxtOutputDirForGrappoloInputFile, this.lblOutputDirForGrappoloInputFile);
    }//GEN-LAST:event_btnOutputDirActionPerformed

    private void prTxtGrappoloInputFileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_prTxtGrappoloInputFileKeyReleased
        this.grappoloInputFileName = this.prTxtGrappoloInputFile.getText();
        this.prTxtGrappoloInputFileCopy.setText(this.prTxtOutputDirForGrappoloInputFile.getText() + File.separator + this.grappoloInputFileName);
    }//GEN-LAST:event_prTxtGrappoloInputFileKeyReleased
//// End of TAB 1
    
    private void btnOutputDirGrappoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputDirGrappoloActionPerformed
        chooseDirWrapper(this.prTxtOutputDirForGrappoloFile, this.lblOutputDirForGrappoloFile);
    }//GEN-LAST:event_btnOutputDirGrappoloActionPerformed

    private void prRdUseGrappoloInputFileJustCreatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prRdUseGrappoloInputFileJustCreatedActionPerformed
        if(this.prRdUseGrappoloInputFileJustCreated.isSelected()){
            // Enable related fields
            this.prTxtGrappoloInputFileCopy.setEnabled(true);
            // Disable other related fields
            this.prTxtSelectGrappoloInputFile.setEnabled(false);
            this.btnChooseInputGrap.setEnabled(false);
        }
    }//GEN-LAST:event_prRdUseGrappoloInputFileJustCreatedActionPerformed

    private void prRdUseGrappoloInputFileCreatedBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prRdUseGrappoloInputFileCreatedBeforeActionPerformed
        if(this.prRdUseGrappoloInputFileCreatedBefore.isSelected()){
            // Enable related fields
            this.prTxtSelectGrappoloInputFile.setEnabled(true);
            this.btnChooseInputGrap.setEnabled(true);
            // Disable other related fields
            this.prTxtGrappoloInputFileCopy.setEnabled(false);
        }
    }//GEN-LAST:event_prRdUseGrappoloInputFileCreatedBeforeActionPerformed

    private void btnChooseInputGrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseInputGrapActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
        fc.setCurrentDirectory(new File("."+ File.separator + "Resources"));
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            this.prTxtSelectGrappoloInputFile.setText(selectedFile.getAbsolutePath());
            this.grappoloInputFileName = this.prTxtSelectGrappoloInputFile.getText();
            this.prTxtArea.append("User selected file: " + this.grappoloInputFileName + "\n\n");
        }
        else{
            this.prTxtArea.append("User canceled action\n");
            this.prTxtSelectGrappoloInputFile.setText("");
        }
    }//GEN-LAST:event_btnChooseInputGrapActionPerformed

    //// Tab 1 function
    // This function throws exceptions 5-12
    private void btnMakeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeFileActionPerformed
        this.prRdCSVcreatedBefore.setForeground(Color.BLACK);
        this.lblOutputDirForGrappoloInputFile.setForeground(Color.BLACK);
        this.lblGrappoloInputFile.setForeground(Color.BLACK);

        // Simple guards
        // Guard 1: Input file is not selected
        if(this.prRdCSVcreatedBefore.isSelected() && this.prTxtInputFileCreatedBefore.getText().isEmpty()){
            this.prRdCSVcreatedBefore.setForeground(Color.red);
            getFieldFocus(this.prTxtInputFileCreatedBefore);
            JOptionPane.showMessageDialog(this, "Please select select input data file",
                "Input File Not Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(this.prRdCSVjustCreated.isSelected() && this.prTxtInputFileJustCreated.getText().isEmpty()){
            this.prRdCSVjustCreated.setSelected(false);
            this.prRdCSVcreatedBefore.setSelected(true);
            this.prTxtInputFileCreatedBefore.setEnabled(true);
            this.btnChooseInputCsv.setEnabled(true);
            this.prRdCSVcreatedBefore.setForeground(Color.red);
            getFieldFocus(this.prTxtInputFileCreatedBefore);
            JOptionPane.showMessageDialog(this, "Please select select input data file",
                "Input File Not Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Guard 2: Output folder is not selected
        if(this.prTxtOutputDirForGrappoloInputFile.getText().isEmpty()){
            this.lblOutputDirForGrappoloInputFile.setForeground(Color.red);
            getFieldFocus(this.prTxtOutputDirForGrappoloInputFile);
            JOptionPane.showMessageDialog(this, "Please select output folder",
                "Folder Not Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Guard 3: Output filename is not specified
        if(this.prTxtGrappoloInputFile.getText().isEmpty()){
            this.lblGrappoloInputFile.setForeground(Color.red);
            getFieldFocus(this.prTxtGrappoloInputFile);
            JOptionPane.showMessageDialog(this, "Please enter output file name (.graph)",
                "Output File Not Specified", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Set working dir for Grappolo input file
        this.makeFileWorkingDir = this.prTxtOutputDirForGrappoloInputFile.getText();
        this.grappoloInputFileName = this.makeFileWorkingDir + File.separator + this.prTxtGrappoloInputFile.getText();
        if(this.prChBoxShowOutputMakeFile.isSelected()){
            this.prTxtAreaMkFile.append("The input file is:\n" + this.inputFileName + this.newline );
            this.prTxtAreaMkFile.append("The output file is:\n" + this.grappoloInputFileName + this.newline );
        }
        
        String filename = this.inputFileName;
        String outputfilename = this.grappoloInputFileName;

        int flag = 1; // flag for choosing weight can be 1, 2, 3 -- weight
        // Setting flag
        if(this.prRdLengthMaxLength.isSelected()){
            flag = 1;
        }
        if(this.prRdMatchesLength.isSelected()){
            flag = 2;
        }
        if(this.prRdScoreSelfScore.isSelected()){
            flag = 3;
        }
        String line = ""; // for reading
        String[] toks; // tokens
        Float w = (float)0.0; // edge weight
        Integer i, j; // first and second vertex
        List<VertexWeight> currentList = null;
        Integer cur = 0; // current index - first index is always 0
        String lineToPrint = "";

        int numVertices = this.num_seqs;
        int numEdges = this.num_edges;
        // entryFlag is true if entered Grappolo immediately after processing 
        // with pGraph, otherwise entryFlag is false
        boolean entryFlag = true;
        String s = "";
        if(numVertices == -1){
            numEdges = 0;
            entryFlag = false;
            while(true){
                // Ask user for the number of vertices
                s = (String)JOptionPane.showInputDialog(this, "Enter the number of sequences", 
                        "Enter Number Sequences", JOptionPane.QUESTION_MESSAGE);
                // Check if the input was a valid number
                try{
                    int num = Integer.parseInt(s);
                    numVertices = num;
                    break;
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(this, "Input is not a number. Try again.",
                        "Invalid Input", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        // The output structure
        HashMap<Integer, List<VertexWeight> > graph = new HashMap< >(numVertices, (float) 1.0);
        
        // 1. Read all edges into the structure
        try {
            FileReader infile = new FileReader(filename);
            BufferedReader inr = new BufferedReader(infile);
            
            try {
                // Reading and processing lines
                while((line = inr.readLine()) != null){
                    toks = line.split(",");
                    i = Integer.valueOf(toks[0]);
                    j = Integer.valueOf(toks[1]);
                    if(!entryFlag){
                        // count edges
                        numEdges++;
                    }
                    switch(flag){
                        case 1:
                            w = Float.valueOf(toks[2]);
                            break;
                        case 2:
                            w = Float.valueOf(toks[3]);
                            break;
                        case 3:
                            w = Float.valueOf(toks[4]);
                            break;
                    }// endOf switch
                    
                    // Create neighbor vertex
                    VertexWeight el = new VertexWeight();
                    // 3ac. Set its values
                    el.vertex = j;
                    el.weight = w;
                    currentList = graph.get(i);
                    if(currentList != null){ // vertex exists
                        graph.get(i).add(el);
                    }else{// vertex doesn't exist
                        List<VertexWeight> tempList = new ArrayList<>();
                        tempList.add(el);
                        graph.put(i, tempList);
                    }                    
                }// endOf while
                try {
                    inr.close();
                    try {
                        infile.close();
                        if(this.prChBoxShowOutputMakeFile.isSelected())
                            this.prTxtAreaMkFile.append("Done reading input file\n");
                        if(!entryFlag){
                            this.num_seqs = numVertices;
                            this.num_edges = numEdges;
                        }
                        if(this.prChBoxShowOutputMakeFile.isSelected()){
                            this.prTxtAreaMkFile.append("Number of sequences is: " + this.num_seqs.toString() + this.newline );
                            this.prTxtAreaMkFile.append("Number of edges is: " + this.num_edges.toString() + this.newline );
                        }
                    } catch (IOException e) {
                            JOptionPane.showMessageDialog(this, 
                             "Showing system diagnostic message of Exception 7:"
                                    + this.newline + e + this.newline
                                    + "Close and restart this program.", 
                            "Error Closing Reading File", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (IOException e) {
                        JOptionPane.showMessageDialog(this, 
                         "Showing system diagnostic message of Exception 6:"
                                + this.newline + e + this.newline
                                + "Close and restart this program.", 
                        "Error Closing Reading File Pointer", JOptionPane.ERROR_MESSAGE);
                }
                } catch (IOException e) {
                        JOptionPane.showMessageDialog(this, 
                         "Showing system diagnostic message of Exception 5:"
                                + this.newline + e + this.newline
                                + "Close and restart this program.", 
                        "Error Reading Line", JOptionPane.ERROR_MESSAGE);
                }
        } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(this, 
                     "Showing system diagnostic message of Exception 8:"
                            + this.newline + e + this.newline
                            + "Close and restart this program.", 
                    "Error Opening File For Reading", JOptionPane.ERROR_MESSAGE);
        }
        
        // 2. Write out the structure in Metis (DIMAC10) format
        // First check if the output with such a name already exists
        this.tryOverwriteFile(outputfilename, this.prTxtGrappoloInputFile, this.lblGrappoloInputFile);

        Writer owr;
        try {
            owr = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputfilename)));
            try {
                lineToPrint = Integer.toString(numVertices) + " " + Integer.toString(numEdges*2) + " 1" + newline;
                owr.write(lineToPrint);
                cur = 0;
                while(!graph.isEmpty()){
                    currentList = graph.get(cur);
                    // while loop for absent vertex/verteces
                    while(currentList == null){
                        lineToPrint = this.newline;
                        owr.write(lineToPrint);
                        cur = cur + 1;
                        currentList = graph.get(cur);
                    }
                    // vertex is present
                    // iterate over the list of neighbours while
                    // simultaneously pushing reverse edges into the graph
                    graph.remove(cur);
                    for(VertexWeight el : currentList){
                        // printing
                        lineToPrint = Integer.toString(el.vertex+1) + " " + Float.toString(el.weight) + "  ";
                        owr.write(lineToPrint);
                        
                        // pushing
                        VertexWeight jl = new VertexWeight();
                        jl.vertex = cur;
                        jl.weight = el.weight;
                        i = el.vertex;
                        if(graph.get(i) != null){
                            graph.get(i).add(jl);
                        }else if(i > cur){// vertex doesn't exist
                            List<VertexWeight> tempList = new ArrayList<>();
                            tempList.add(jl);
                            graph.put(i, tempList);
                        }                    
                    } // endOf for(VertexWeight ...
                    
                    // Write the new line character
                    lineToPrint = this.newline;
                    owr.write(lineToPrint);
                    cur = cur + 1;
                } // ondOf while(!graph.isEmpty()){

                // Print empty lines for end-singletons
                while(cur < numVertices){
                    // Write the new line character
                    lineToPrint = newline;
                    owr.write(lineToPrint);
                    cur = cur + 1;
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, 
                 "Showing system diagnostic message of Exception 9:"
                        + this.newline + e + this.newline
                        + "Close all files and restart this program.", 
                "Error Writing Line", JOptionPane.ERROR_MESSAGE);
            }finally{
                try {
                    owr.close();
                    this.prTxtGrappoloInputFileCopy.setText(outputfilename);
                    if(this.prChBoxShowOutputMakeFile.isSelected())
                        this.prTxtAreaMkFile.append("Done writing output file\n");
                    JOptionPane.showMessageDialog(this, "File " + this.prTxtGrappoloInputFile.getText() + " created successfully",
                        "File created successfully", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, 
                     "Showing system diagnostic message of Exception 10:"
                            + this.newline + e + this.newline
                            + "Close all files and restart this program.", 
                    "Error Closing Output File Pointer", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(this, 
                     "Showing system diagnostic message of Exception 11:"
                            + this.newline + e + this.newline
                            + "Close all files and restart this program.", 
                    "Error Opening Output File", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnMakeFileActionPerformed
    //// End of Tab 1 function

    // Tab 2 function
    // This function throws exceptions 1-4
    private void btnGrappoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrappoloActionPerformed
        // Reset the labels color
        this.lblOutputDirForGrappoloFile.setForeground(Color.BLACK);
        this.prRdUseGrappoloInputFileCreatedBefore.setForeground(Color.BLACK);
        this.lblGrappoloOutputFile.setForeground(Color.BLACK);
                
        // Simple guards
        if(this.grappoloInputFileName.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select select input data file",
                "Input File Not Selected", JOptionPane.WARNING_MESSAGE);
            this.prRdUseGrappoloInputFileCreatedBefore.setSelected(true);
            this.prRdUseGrappoloInputFileCreatedBefore.setForeground(Color.red);
            this.prTxtSelectGrappoloInputFile.setEnabled(true);
            this.btnChooseInputGrap.setEnabled(true);
            getFieldFocus(this.prTxtSelectGrappoloInputFile);
            return;
        }            
        if(this.prTxtOutputDirForGrappoloFile.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select output folder",
                "Folder Not Selected", JOptionPane.WARNING_MESSAGE);
            this.lblOutputDirForGrappoloFile.setForeground(Color.red);
            getFieldFocus(this.prTxtOutputDirForGrappoloFile);
            return;
        }
        if(this.prTxtGrappoloOutputFile.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter output file name",
                "Output File Not Specified", JOptionPane.WARNING_MESSAGE);
            this.lblGrappoloOutputFile.setForeground(Color.red);
            getFieldFocus(this.prTxtGrappoloOutputFile);
            return;
        }
        
        // Check if the specified output file already exists.
        this.tryOverwriteFile(this.prTxtOutputDirForGrappoloFile.getText() + File.separator
                + this.prTxtGrappoloOutputFile.getText(), this.prTxtGrappoloOutputFile, this.lblGrappoloOutputFile);

        // Getting ready to construct the command line for the external executable
        String cmd = ""; // command line to call an external process
        String[] classpathEntries = System.getProperty("java.class.path").split(File.pathSeparator);
        // Strings for command line arguments
        String strongScaling = "";
        String vf = ""; // vertex following flag
        String coloring = "";
        if(this.prChkBoxStrongScaling.isSelected())
            strongScaling = "-s";
        if(this.prChkBoxVF.isSelected())
            vf = "-v";
        // Use either coloring -c or map -r
        if(this.prChBoxColorMap.isSelected()){
            if(this.prRdColoring.isSelected())
                coloring = "-c";
            if(this.prRdMap.isSelected())
                coloring = "-r";
        }
        
        // Create input and output file strings, Windows version
        String inputFile = "";
        if(this.grappoloInputFileName.startsWith("\"") && this.grappoloInputFileName.endsWith("\""))
            inputFile = this.grappoloInputFileName;
        else
            inputFile = "\"" + this.grappoloInputFileName + "\"";
        
        String outputFile = "\"" + this.prTxtOutputDirForGrappoloFile.getText()
                + File.separator + this.prTxtGrappoloOutputFile.getText() + "\"";
        
        // 1. Constructing command line; output is mandatory
        cmd = this.theExec + " -f 5"
                + " " + strongScaling
                + " " + vf
                + " -o"
                + " " + coloring
                + " -m " + this.prTxtMinSize.getText()
                + " -d " + this.prTxtCthreshold.getText()
                + " -t " + this.prTxtThreshold.getText()
                + " " + inputFile
                + " " + outputFile;
        File dir = new File(".");
        try{
            // The executable theExec is in the folder named "Resources/grapbin"
            cmd = dir.getCanonicalPath() + File.separator + "Resources" 
                    + File.separator + "grapbin" + File.separator + cmd;
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, 
                    "Showing system diagnostic message of Exception 1:"
                            + this.newline + e + this.newline
                            + "Close and restart this program.", 
                    "System Failure", JOptionPane.ERROR_MESSAGE);
        }

        // 2. Call external process
        try{
            int ret = -1; // External application exit value

            Runtime runTime = Runtime.getRuntime();
            Process process = runTime.exec(cmd);

            // Getting ready to read in the program outputs
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();

            InputStreamReader isr = new InputStreamReader(inputStream);
            InputStreamReader esr = new InputStreamReader(errorStream);

            // Reading standard output
            int numChars;
            char[] plainText = new char[1024];
            StringBuffer standardOutput = new StringBuffer();

            // Start displaying busy (hourglass) cursor
            startWaitCursor();

            // Reading standard output
            while ((numChars = isr.read(plainText)) > 0) {
                standardOutput.append(plainText, 0, numChars);
            }
            if(this.prChkBoxShowOutputGrappolo.isSelected()){
                if(standardOutput.length() > 0)
                    this.prTxtArea.append("Grappolo standard output:" 
                            + this.newline + standardOutput.toString());
            }
            
            // Reading error output
            StringBuffer standardError = new StringBuffer();
            while ((numChars = esr.read(plainText)) > 0) {
                standardError.append(plainText, 0, numChars);
            }
            if(this.prChkBoxShowOutputGrappolo.isSelected()){
                if(standardError.length() > 0)
                    this.prTxtArea.append("Grappolo issued error message:" 
                            + this.newline + standardError.toString());
            }

            try{
                ret = process.waitFor();

                // Do some things upon succesful run
                // Set text field on Tab 3.                
                this.prTxtGrappoloAssociatedFile.setText(outputFile);
//                this.prTxtOutputDirForFinalFile.setText(this.prTxtOutputDirForGrappoloFile.getText());
                // Output diagnostic message
                if(this.prChkBoxShowOutputGrappolo.isSelected()){
                    this.prTxtArea.append("The output file is stored at:\n" + outputFile + "\n");
                }
                // Show success pop-up.
                JOptionPane.showMessageDialog(this, "File " + this.prTxtGrappoloOutputFile.getText() + " created successfully",
                    "File Created Successfully", JOptionPane.INFORMATION_MESSAGE);
            } catch (InterruptedException e) {
                JOptionPane.showMessageDialog(this, 
                        "Showing system diagnostic message of Exception 2:"
                                + this.newline + e + this.newline
                                + "Close and restart this program.", 
                        "System Failure", JOptionPane.ERROR_MESSAGE);
            }
        // Return to normal cursor
        stopWaitCursor();
        }catch(IOException e){
            JOptionPane.showMessageDialog(this, 
                    "Showing system diagnostic message of Exception 3:"
                            + this.newline + e + this.newline
                            + "Close and restart this program.", 
                    "System Failure", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGrappoloActionPerformed

    private void btnClearOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearOutputActionPerformed
        this.prTxtArea.setText("");
    }//GEN-LAST:event_btnClearOutputActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.prTxtAreaMkFile.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnClearOutputGrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearOutputGrapActionPerformed
        this.prTxtAreaProcessOutput.setText("");
    }//GEN-LAST:event_btnClearOutputGrapActionPerformed

    
    // Tab 3 function.
    private void issueWarningFilesDontMatch(){
        JOptionPane.showMessageDialog(this, "Files do not match.\nSelect matching files.",
            "Select Matching Files", JOptionPane.INFORMATION_MESSAGE);
    }
            
    // Tab 3 function.
    // This function is called when Tab 3 is opened or when Process Grappolo Output button is pressed.
    private void processOnTab3Click()
    {
        if(!"".equals(this.prTxtOutputDirForGrappoloFile.getText())){
            this.prTxtOutputDirForFinalFile.setText(this.prTxtOutputDirForGrappoloFile.getText());
        }else{
            this.prTxtOutputDirForFinalFile.setText(this.prTxtOutputDirForGrappoloInputFile.getText());
        }
        processGrappoloOutput();
        processFastaSeqs();
    }
    
    // Tab 3 Function
    private void enableFields(javax.swing.JLabel lbl, javax.swing.JButton btn, 
            javax.swing.JLabel lblInfo, javax.swing.JTextField txt, Integer myVar){
        lbl.setForeground(Color.red);
        btn.setEnabled(true);
        txt.setEnabled(true);
        getFieldFocus(txt);
//        if("".equals(txt.getText())){
//            getFieldFocus(txt);
//            lblInfo.setText("Total number of sequences: " + myVar.toString());
//        }
    }
    // Tab 2 Function
    private void prChBoxColorMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prChBoxColorMapActionPerformed
        // Selecting the box
        if(this.prChBoxColorMap.isSelected()){
            this.prRdColoring.setEnabled(true);
            this.prRdMap.setEnabled(true);
            this.prRdColoring.setSelected(true);
            this.prRdMap.setSelected(false);
        }else{// Unselecting the checkbox
            this.prRdColoring.setEnabled(false);
            this.prRdMap.setEnabled(false);
            this.prRdMap.setSelected(false);
        }
    }//GEN-LAST:event_prChBoxColorMapActionPerformed

    // Tab 2 function
    // This function is run when Run Grappolo tab is clicked
    // It borrows output folder name from the tab before it 
    private void processRunGrappoloTabClick(){
        this.prTxtOutputDirForGrappoloFile.setText(this.prTxtOutputDirForGrappoloInputFile.getText());
    }
    // Tab 3 function.
    // This function sets origInputFastaFile variable.
    private void btnChooseOrigFastaFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseOrigFastaFileActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
        fc.setCurrentDirectory(null);
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            this.prTxtOriginalFastaFile.setText(selectedFile.getAbsolutePath());
            this.origInputFastaFile = this.prTxtOriginalFastaFile.getText();
            this.lblOriginalFastaFile.setForeground(Color.BLACK);
            if(this.prChkBoxShowOutputProcessGrappolo.isSelected())
                this.prTxtAreaProcessOutput.append("User selected file: " + this.origInputFastaFile + "\n\n");
        }
        else{
            if(this.prChkBoxShowOutputProcessGrappolo.isSelected())
                this.prTxtAreaProcessOutput.append("User canceled action\n");
            getFieldFocus(this.prTxtOriginalFastaFile);
        }
        // read in fasta seq file and display how many seqs are in
        // sets numSeqFasta
        processFastaSeqs(); 
    }//GEN-LAST:event_btnChooseOrigFastaFileActionPerformed
    // Tab 3 Function
    // Exceptions 13-14
    private void processFastaSeqs(){
         String filename = "";
         if(this.prTxtOriginalFastaFile.getText().isEmpty()){
//            this.outputNotSelectedWarning("No fasta file selected", 
//                     "Fasta File Not Selected", this.lblOriginalFastaFile, this.prTxtOriginalFastaFile);
            enableFields(this.lblOriginalFastaFile, this.btnChooseOrigFastaFile,
                    this.lblOrigFastaInfo, this.prTxtOriginalFastaFile, this.numSeqFasta);
            return;
         }
         if(this.prTxtOriginalFastaFile.getText().startsWith("\"") 
                 &&this.prTxtOriginalFastaFile.getText().endsWith("\"")){
             filename = this.prTxtOriginalFastaFile.getText().substring(1, this.prTxtOriginalFastaFile.getText().length()-1);
         }else{
             filename = this.prTxtOriginalFastaFile.getText();
         }
         
        FileReader infile;
        String line = "";
        this.fastaSeqs = new ArrayList<>();
        try {
            infile = new FileReader(filename);
            BufferedReader inr = new BufferedReader(infile);
             try {
                 // read line by line
                 while((line = inr.readLine()) != null){
                     if(line.startsWith(">")){
                         this.fastaSeqs.add(line);
                     }                         
                 }
                 inr.close();
                 infile.close();
                 // update label
                 this.numSeqFasta = this.fastaSeqs.size();
                 this.lblOrigFastaInfo.setText("Total number of sequences: " + this.numSeqFasta.toString());
                 if(this.prChkBoxShowOutputProcessGrappolo.isSelected())
                     this.prTxtAreaProcessOutput.append("Total number of sequences in fasta file: " 
                             + this.numSeqFasta.toString() + this.newline);
             } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, 
                     "Showing system diagnostic message of IOException 14:"
                            + this.newline + e + this.newline
                            + "Close and restart this program.", 
                    "Error Reading Line", JOptionPane.ERROR_MESSAGE);
             }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, 
             "Showing system diagnostic message of FileNotFoundException Exception 13:"
                    + this.newline + e + this.newline
                    + "Close and restart this program.", 
            "Error Opening File For Reading", JOptionPane.ERROR_MESSAGE);
        }
    }
    // Tab 3 Function
    // Exceptions 15-16
    private void processGrappoloOutput(){
         String filename = "";
         if(this.prTxtGrappoloAssociatedFile.getText().isEmpty()){
//            this.outputNotSelectedWarning("No cluster file selected", 
//                     "Cluster File Not Selected", this.lblOriginalFastaFile, this.prTxtOriginalFastaFile);
            enableFields(this.lblGrappoloAssociatedFile, this.btnChooseAssocGrapFile, 
                    this.lblGrappoloAssociatedOutputInfo, this.prTxtGrappoloAssociatedFile, this.numSeqGrap);
            return;
         }
         if(this.prTxtGrappoloAssociatedFile.getText().startsWith("\"") 
                 &&this.prTxtGrappoloAssociatedFile.getText().endsWith("\"")){
             filename = this.prTxtGrappoloAssociatedFile.getText().substring(1, this.prTxtGrappoloAssociatedFile.getText().length()-1);
         }else{
             filename = this.prTxtGrappoloAssociatedFile.getText();
         }
         
        FileReader infile;
        Integer clust, vert;
        Integer maxSeqNum = 0; // track the maximal sequence number
        String line = "";
        String[] toks = null; // tokens
        this.grapSeqs = new HashMap<>();
        try {
            infile = new FileReader(filename);
            BufferedReader inr = new BufferedReader(infile);
             try {
                 // read line by line
                 while((line = inr.readLine()) != null){
                     toks = line.split("\\s+");
                     clust = Integer.valueOf(toks[1]);
                     vert = Integer.valueOf(toks[0]);
                     if(this.grapSeqs.containsKey(clust)){
                         this.grapSeqs.get(clust).add(vert);
                     }else{
                         List<Integer> l = new ArrayList<>();
                         l.add(vert);
                         this.grapSeqs.put(clust, l);
                     }
                     if(vert > maxSeqNum){
                         maxSeqNum = vert;
                     }
                 }
                 inr.close();
                 infile.close();
                 // update label
                 this.numSeqGrap = maxSeqNum + 1;
                 this.lblGrappoloAssociatedOutputInfo.setText("Total number of sequences: "
                         + this.numSeqGrap.toString());
                 if(this.prChkBoxShowOutputProcessGrappolo.isSelected())
                     this.prTxtAreaProcessOutput.append("Total number of sequences in Grappolo file: "
                         + this.numSeqGrap.toString() + this.newline);
             } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, 
                     "Showing system diagnostic message of IOException 16:"
                            + this.newline + e + this.newline
                            + "Close and restart this program.", 
                    "Error Reading Line", JOptionPane.ERROR_MESSAGE);
             }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, 
             "Showing system diagnostic message of FileNotFoundException Exception 15:"
                    + this.newline + e + this.newline
                    + "Close and restart this program.", 
            "Error Opening File For Reading", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Function used on Tab 3; Exception 18
    private void errorWritingLineMessagePopup(IOException e, String line){
        JOptionPane.showMessageDialog(this, 
         "Could not write a line." + line 
                + "Showing system diagnostic message of Exception 18:"
                + this.newline + e + this.newline
                + "Close all files and restart this program.", 
        "Error Writing Line", JOptionPane.ERROR_MESSAGE);
    }
    // Function used on Tab 3; Exception 19
    private void errorClosingOutputFileMessage(IOException e){
        JOptionPane.showMessageDialog(this, 
         "Could not close file pointer." + this.newline 
                + "Showing system diagnostic message of Exception 19:"
                + this.newline + e + this.newline
                + "Close all files and restart this program.", 
        "Error Closing Output File Pointer", JOptionPane.ERROR_MESSAGE);
    }
    // Tab 3 function. 
    // This function sets assocGrappoloOutputFile variable.
    private void btnChooseAssocGrapFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseAssocGrapFileActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
        fc.setCurrentDirectory(null);
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            this.prTxtGrappoloAssociatedFile.setText(selectedFile.getAbsolutePath());
            this.assocGrappoloOutputFile = this.prTxtGrappoloAssociatedFile.getText();
            this.lblGrappoloAssociatedFile.setForeground(Color.BLACK);
            if(this.prChkBoxShowOutputProcessGrappolo.isSelected())
                this.prTxtAreaProcessOutput.append("User selected file: " + this.assocGrappoloOutputFile + "\n\n");
        }
        else{
            if(this.prChkBoxShowOutputProcessGrappolo.isSelected())
                this.prTxtAreaProcessOutput.append("User canceled action\n");
            this.prTxtGrappoloAssociatedFile.setText("");
            this.prTxtGrappoloAssociatedFile.requestFocus();
            this.prTxtGrappoloAssociatedFile.setCaretPosition(0);
        }
        
        // Reads in grappolo output file and display how many seqs are in;
        // Sets the numSeqGrap
        processGrappoloOutput();
    }//GEN-LAST:event_btnChooseAssocGrapFileActionPerformed

    // Tab 3 function
    // Helper function for btnProcessGrappoloOutputActionPerformed
    private void printCluster(Map.Entry<Integer, List<Integer> > entry, Writer owr){
        String lineToPrint = "";
        for(Integer j : entry.getValue()){
            lineToPrint = j.toString() + " " + this.fastaSeqs.get(j) + this.newline;
            try {
                owr.write(lineToPrint);
            } catch (IOException e) {
                errorWritingLineMessagePopup(e, lineToPrint);
            }
        } // endOf for(Integer j : ...
    }
    // Tab 3 function; Exception 17
    private void btnProcessGrappoloOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessGrappoloOutputActionPerformed
        // Initial color re-set
        this.lblFinalFile.setForeground(Color.BLACK);
        
        // Check if structures are filled
        if(this.fastaSeqs == null)
            this.processFastaSeqs();
        if(this.grapSeqs == null)
            this.processGrappoloOutput();
        
        // Simple guards
        if(!Objects.equals(this.numSeqFasta, this.numSeqGrap)){
            // Invalidate inputs
            enableFields(this.lblGrappoloAssociatedFile, this.btnChooseAssocGrapFile, 
                    this.lblGrappoloAssociatedOutputInfo, this.prTxtGrappoloAssociatedFile, this.numSeqGrap);
            enableFields(this.lblOriginalFastaFile, this.btnChooseOrigFastaFile,
                    this.lblOrigFastaInfo, this.prTxtOriginalFastaFile, this.numSeqFasta);
            JOptionPane.showMessageDialog(this, 
                "Number of sequences in Fasta and Cluster files do not match.\nSelect different files", 
                "Input Files Do Not Match", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Output folder is not selected
        if(this.prTxtOutputDirForFinalFile.getText().isEmpty()){
            getFieldFocus(this.prTxtOutputDirForFinalFile);
            this.lblOutputDirForFinalFile.setForeground(Color.red);
            JOptionPane.showMessageDialog(this, "Please select output folder",
                "Folder Not Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Output filename is not specified
        if(this.prTxtFinalFile.getText().isEmpty()){
            getFieldFocus(this.prTxtFinalFile);
            this.lblFinalFile.setForeground(Color.red);
            JOptionPane.showMessageDialog(this, "Please enter file name",
                "Filename Not Specified", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Passed all the guards, now print out
        // First check if the output with such a name already exists
        String outputfilename = this.prTxtOutputDirForFinalFile.getText() + File.separator + this.prTxtFinalFile.getText();
        this.tryOverwriteFile(outputfilename, this.prTxtFinalFile, this.lblFinalFile);

        Writer owr;
        String lineToPrint = "";
        // Values for printFlag: 0 - print singles, 1 - print non-singles, 2 - print all
        int printFlag = 2; // default value
        if(this.prRdSingles.isSelected()){
            printFlag = 0;
        }
        if(this.prRdNonSingles.isSelected()){
            printFlag = 1;
        }
        try {
            // Try to open file for writing
            owr = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputfilename)));
            // File opened all right, now procede with iterating over the map
            for(Map.Entry<Integer, List<Integer> > entry : this.grapSeqs.entrySet()){
                Integer i = entry.getKey();
                switch(printFlag){
                    case 0:
                        if(i == -1){
                            lineToPrint = entry.getValue().size() + " Singletons:" + this.newline;
                            try {
                                owr.write(lineToPrint);
                                printCluster(entry, owr);
                            } catch (IOException e) {
                                errorWritingLineMessagePopup(e, lineToPrint);
                            }
                        }// endOf if(i == -1)
                        break;
                    case 1:
                        if(i != -1){
                            lineToPrint = entry.getValue().size() + " Sequences: Cluster: " + i.toString() + this.newline;
                            try {
                                owr.write(lineToPrint);
                                printCluster(entry, owr);
                            } catch (IOException e) {
                                errorWritingLineMessagePopup(e, lineToPrint);
                            }
                        } // endOf if
                        break;
                    case 2:
                        if(i == -1)
                            lineToPrint = entry.getValue().size() + " Singletons:" + this.newline;
                        else
                            lineToPrint = entry.getValue().size() + " Sequences: Cluster: " + i.toString() + this.newline;    
                        try {
                            owr.write(lineToPrint);
                            printCluster(entry, owr);
                        } catch (IOException e) {
                            errorWritingLineMessagePopup(e, lineToPrint);
                        }
                        break;
                }// endOf switch
                if(printFlag == 0 && i == -1)
                    break; // All singletons have been printed out, break out
            } // endOf for(Map. ...
            try {
                // Done printing, close file pointer here
                owr.close();
                // Closed all right, show success message
                JOptionPane.showMessageDialog(this, "File " + this.prTxtFinalFile.getText()
                        + " created successfully",
                    "File Created Successfully", JOptionPane.INFORMATION_MESSAGE);
                if(this.prChkBoxShowOutputProcessGrappolo.isSelected())
                    this.prTxtAreaProcessOutput.append("The output is stored at:" 
                            + this.newline + outputfilename);
            } catch (IOException e) {
                errorClosingOutputFileMessage(e);
            }
        } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(this, 
                     "Could not open file for writing.\nShowing system diagnostic message of Exception 17:"
                            + this.newline + e + this.newline
                            + "Close all files and restart this program.", 
                    "Error Opening Output File", JOptionPane.ERROR_MESSAGE);
        } 
        
    }//GEN-LAST:event_btnProcessGrappoloOutputActionPerformed
    // Tab 3 function.
    private void btnIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIconActionPerformed
        showGrappoloCopyrights();
    }//GEN-LAST:event_btnIconActionPerformed
    // Tab 3 function.
    private void btnIcon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIcon1ActionPerformed
        showGrappoloCopyrights();
    }//GEN-LAST:event_btnIcon1ActionPerformed
    // Tab 3 function.
    private void btnIcon2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIcon2ActionPerformed
        showGrappoloCopyrights();
    }//GEN-LAST:event_btnIcon2ActionPerformed
    // Tab 3 function.
    private void btnOutputDirFinalFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputDirFinalFileActionPerformed
        chooseDirWrapper(this.prTxtOutputDirForFinalFile, this.lblOutputDirForFinalFile);
    }//GEN-LAST:event_btnOutputDirFinalFileActionPerformed
    // Tab 3 function.
    private void showGrappoloCopyrights(){
        JOptionPane.showMessageDialog(this, 
                "Grappolo\nCopyright (2014) Battelle Memorial Institute\nAll rights reserved.", 
                "About Grappolo", JOptionPane.INFORMATION_MESSAGE, 
                new ImageIcon(getClass().getResource("grapes_small.png")));
    }            

   /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GrappoloFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GrappoloFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GrappoloFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GrappoloFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GrappoloFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseAssocGrapFile;
    private javax.swing.JButton btnChooseInputCsv;
    private javax.swing.JButton btnChooseInputGrap;
    private javax.swing.JButton btnChooseOrigFastaFile;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearOutput;
    private javax.swing.JButton btnClearOutputGrap;
    private javax.swing.JButton btnGrappolo;
    private javax.swing.JButton btnIcon;
    private javax.swing.JButton btnIcon1;
    private javax.swing.JButton btnIcon2;
    private javax.swing.JButton btnMakeFile;
    private javax.swing.JButton btnOutputDir;
    private javax.swing.JButton btnOutputDirFinalFile;
    private javax.swing.JButton btnOutputDirGrappolo;
    private javax.swing.JButton btnProcessGrappoloOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCthreshold;
    private javax.swing.JLabel lblFinalFile;
    private javax.swing.JLabel lblGrappoloAssociatedFile;
    private javax.swing.JLabel lblGrappoloAssociatedOutputInfo;
    private javax.swing.JLabel lblGrappoloInputFile;
    private javax.swing.JLabel lblGrappoloOutputFile;
    private javax.swing.JLabel lblMinSize;
    private javax.swing.JLabel lblOrigFastaInfo;
    private javax.swing.JLabel lblOriginalFastaFile;
    private javax.swing.JLabel lblOutputDirForFinalFile;
    private javax.swing.JLabel lblOutputDirForGrappoloFile;
    private javax.swing.JLabel lblOutputDirForGrappoloInputFile;
    private javax.swing.JLabel lblSelectWeight;
    private javax.swing.JLabel lblThreshold;
    private javax.swing.JCheckBox prChBoxColorMap;
    private javax.swing.JCheckBox prChBoxShowOutputMakeFile;
    private javax.swing.JCheckBox prChkBoxShowOutputGrappolo;
    private javax.swing.JCheckBox prChkBoxShowOutputProcessGrappolo;
    private javax.swing.JCheckBox prChkBoxStrongScaling;
    private javax.swing.JCheckBox prChkBoxVF;
    private javax.swing.JPanel prPanelMakeInputGrap;
    private javax.swing.JPanel prPanelProcessGrappoloOutput;
    private javax.swing.JPanel prPanelRunGrappolo;
    private javax.swing.JRadioButton prRdCSVcreatedBefore;
    private javax.swing.JRadioButton prRdCSVjustCreated;
    private javax.swing.JRadioButton prRdColoring;
    private javax.swing.ButtonGroup prRdGroupChooseGrappoloInputFile;
    private javax.swing.ButtonGroup prRdGroupChooseInputFile;
    private javax.swing.ButtonGroup prRdGroupColoringMap;
    private javax.swing.ButtonGroup prRdGroupPrint;
    private javax.swing.ButtonGroup prRdGroupSelectWeight;
    private javax.swing.JRadioButton prRdLengthMaxLength;
    private javax.swing.JRadioButton prRdMap;
    private javax.swing.JRadioButton prRdMatchesLength;
    private javax.swing.JRadioButton prRdNonSingles;
    private javax.swing.JRadioButton prRdPrintAll;
    private javax.swing.JRadioButton prRdScoreSelfScore;
    private javax.swing.JRadioButton prRdSingles;
    private javax.swing.JRadioButton prRdUseGrappoloInputFileCreatedBefore;
    private javax.swing.JRadioButton prRdUseGrappoloInputFileJustCreated;
    private javax.swing.JTabbedPane prTabbedPaneGrappolo;
    private javax.swing.JTextArea prTxtArea;
    private javax.swing.JTextArea prTxtAreaMkFile;
    private javax.swing.JTextArea prTxtAreaProcessOutput;
    private javax.swing.JTextField prTxtCthreshold;
    private javax.swing.JTextField prTxtFinalFile;
    private javax.swing.JTextField prTxtGrappoloAssociatedFile;
    private javax.swing.JTextField prTxtGrappoloInputFile;
    private javax.swing.JTextField prTxtGrappoloInputFileCopy;
    private javax.swing.JTextField prTxtGrappoloOutputFile;
    private javax.swing.JTextField prTxtInputFileCreatedBefore;
    protected javax.swing.JTextField prTxtInputFileJustCreated;
    private javax.swing.JTextField prTxtMinSize;
    protected javax.swing.JTextField prTxtOriginalFastaFile;
    private javax.swing.JTextField prTxtOutputDirForFinalFile;
    protected javax.swing.JTextField prTxtOutputDirForGrappoloFile;
    protected javax.swing.JTextField prTxtOutputDirForGrappoloInputFile;
    private javax.swing.JTextField prTxtSelectGrappoloInputFile;
    private javax.swing.JTextField prTxtThreshold;
    // End of variables declaration//GEN-END:variables
    
    // Input file from pGraph in .csv format; it needs to be transformed into
    // one of the file formats Grappolo can take in.
    public String inputFileName;
    // Variables passed from pGraph
    public Integer num_seqs = 6;
    public Integer num_edges = 12;

    // Private vars
    // working directory for "Make Grappolo Input File" tab
    private String makeFileWorkingDir;
    // Grappolo input file in one of the file formats Grappolo can take in.
    private String grappoloInputFileName = "";
    // I'm not using system dependent end-of-line character
    private final  String newline = "\n";
    // External executable
    private String theExec = "driverForGraphClustering";

    // Variables for tab "Process Grappolo Output"
    private Integer numSeqFasta = 0;
    private Integer numSeqGrap = 0;    
    public String origInputFastaFile = "";
    public String assocGrappoloOutputFile = "";
    // HashMap is for reading in the grappolo output: 
    // key - cluster number, value - list oof sequences
    private Map<Integer, List<Integer> > grapSeqs = null;
    private List<String> fastaSeqs = null;
}
