/*
BEGIN COPYRIGHT NOTICE

pClust Graphical User Interface Version 1.10

@author Svetlana Lockwood

Bioinformatics and Computational Biology Group
Copyright (C) 2015 Washington State University

Fast Protein Clustering Algorithm implements exact matching
of the the maximal match detection algorithm with the use of
a generalized suffix tree.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

If you used this program in your research and found it useful,
please cite these articles:

You are free to modify, extend or distribute this code, as 
long as this copyright notice is included whole and unchanged.  

Comments and bug reports are welcome. 
Contact person: Shira Broschat shira@eecs.wsu.edu 

END COPYRIGHT NOTICE
 */

package AppPackage;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RootPaneContainer;


public class StartGUI extends javax.swing.JFrame {

    /**
     * Creates new form StartGUI
     */
    public StartGUI() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("spiral_logo.png")).getImage());
}

    /**
     * This method turns a normal cursor into the waiting cursor shape.
     * Use this method only in conjuction with stopWaitCursor() method.
     */
    public void startWaitCursor() {
        RootPaneContainer root = (RootPaneContainer) this.getRootPane().getTopLevelAncestor();
        root.getGlassPane().setCursor(
                Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        root.getGlassPane().setVisible(true);
    }

    /**
     * This method turns a waiting cursor into the normal cursor shape.
     * Use this method only in conjuction with startWaitCursor() method.
     */
    public void stopWaitCursor() {
        RootPaneContainer root = (RootPaneContainer) this.getRootPane().getTopLevelAncestor();
        root.getGlassPane().setCursor(
                Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        root.getGlassPane().setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupAlgo = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        lblGapExtend = new javax.swing.JLabel();
        gapExtend = new javax.swing.JSpinner();
        cutoff = new javax.swing.JSpinner();
        lblExactMatchLength = new javax.swing.JLabel();
        matchSimilarity = new javax.swing.JSpinner();
        alignOverLongerSeq = new javax.swing.JSpinner();
        lblBitPrecision = new javax.swing.JLabel();
        lblMatchSimilarity = new javax.swing.JLabel();
        optimalScoreOverSelfScore = new javax.swing.JSpinner();
        lblOptimalScore = new javax.swing.JLabel();
        txtDataFile = new javax.swing.JTextField();
        lblInputFile = new javax.swing.JLabel();
        txtOutputDir = new javax.swing.JTextField();
        lblOutputDir = new javax.swing.JLabel();
        btnInputDataFile = new javax.swing.JButton();
        btnOutputDir = new javax.swing.JButton();
        btnRunPclust = new javax.swing.JButton();
        lblGapOpen = new javax.swing.JLabel();
        gapOpen = new javax.swing.JSpinner();
        prComboBitPrecision = new javax.swing.JComboBox();
        lblAlignOverLongerSeq1 = new javax.swing.JLabel();
        rdGlobal = new javax.swing.JRadioButton();
        rdSemiglobal = new javax.swing.JRadioButton();
        rdLocal = new javax.swing.JRadioButton();
        prComboScoringMatrix = new javax.swing.JComboBox();
        lblScoringMatrix = new javax.swing.JLabel();
        prTxtOutputFileCSV = new javax.swing.JTextField();
        lblOutputFileCSV = new javax.swing.JLabel();
        lblOutputFileCSVCopy = new javax.swing.JLabel();
        prTxtOutputFileCSVCopy = new javax.swing.JTextField();
        btnCreateInputFileDialog = new javax.swing.JButton();
        btnRunGrappolo = new javax.swing.JButton();
        prChBoxShowOutput = new javax.swing.JCheckBox();
        btnClear = new javax.swing.JButton();
        btnIcon = new javax.swing.JButton();
        btnCureFiles = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Parasail");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        outputTextArea.setColumns(20);
        outputTextArea.setLineWrap(true);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 490, 140));

        lblGapExtend.setText("Gap Extend Penalty");
        getContentPane().add(lblGapExtend, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, -1, -1));

        gapExtend.setModel(new javax.swing.SpinnerNumberModel(1, 0, 20, 1));
        gapExtend.setValue(1);
        getContentPane().add(gapExtend, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 90, -1));

        cutoff.setModel(new javax.swing.SpinnerNumberModel(7, 1, 50, 1));
        cutoff.setValue(7);
        getContentPane().add(cutoff, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 90, -1));

        lblExactMatchLength.setText("Exact Match Length");
        getContentPane().add(lblExactMatchLength, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        matchSimilarity.setModel(new javax.swing.SpinnerNumberModel(40, 0, 100, 1));
        matchSimilarity.setValue(40);
        getContentPane().add(matchSimilarity, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 90, -1));

        alignOverLongerSeq.setModel(new javax.swing.SpinnerNumberModel(80, 0, 100, 0));
        alignOverLongerSeq.setValue(80);
        getContentPane().add(alignOverLongerSeq, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 90, -1));

        lblBitPrecision.setText("Bit Precision");
        getContentPane().add(lblBitPrecision, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        lblMatchSimilarity.setText("Match Similarity, %");
        getContentPane().add(lblMatchSimilarity, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, -1, -1));

        optimalScoreOverSelfScore.setModel(new javax.swing.SpinnerNumberModel(30, 0, 100, 1));
        optimalScoreOverSelfScore.setValue(30);
        getContentPane().add(optimalScoreOverSelfScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 90, -1));

        lblOptimalScore.setText("Optimal Score, %");
        getContentPane().add(lblOptimalScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, -1, -1));

        txtDataFile.setToolTipText("Select input FASTA file");
        getContentPane().add(txtDataFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 360, -1));

        lblInputFile.setText("Select Input FASTA File:");
        getContentPane().add(lblInputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        txtOutputDir.setToolTipText("Select folder");
        getContentPane().add(txtOutputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 360, -1));

        lblOutputDir.setText("Select Output Folder:");
        getContentPane().add(lblOutputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        btnInputDataFile.setText("Browse");
        btnInputDataFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputDataFileActionPerformed(evt);
            }
        });
        getContentPane().add(btnInputDataFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 270, -1, -1));

        btnOutputDir.setText("Browse");
        btnOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputDirActionPerformed(evt);
            }
        });
        getContentPane().add(btnOutputDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 340, -1, -1));

        btnRunPclust.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRunPclust.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/pClust_run_button.png"))); // NOI18N
        btnRunPclust.setText("Run Parasail");
        btnRunPclust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunPclustActionPerformed(evt);
            }
        });
        getContentPane().add(btnRunPclust, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 400, 130, 80));

        lblGapOpen.setText("Gap Opening Penalty");
        getContentPane().add(lblGapOpen, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 60, -1, -1));

        gapOpen.setModel(new javax.swing.SpinnerNumberModel(10, 0, 50, 1));
        gapOpen.setValue(10);
        getContentPane().add(gapOpen, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 90, -1));

        prComboBitPrecision.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "16", "32", "64" }));
        prComboBitPrecision.setSelectedIndex(1);
        getContentPane().add(prComboBitPrecision, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 70, -1));

        lblAlignOverLongerSeq1.setText("Alignment Length, %");
        getContentPane().add(lblAlignOverLongerSeq1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        buttonGroupAlgo.add(rdGlobal);
        rdGlobal.setText("Needleman-Wunsch, global");
        getContentPane().add(rdGlobal, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, -1, -1));

        buttonGroupAlgo.add(rdSemiglobal);
        rdSemiglobal.setSelected(true);
        rdSemiglobal.setText("Needleman-Wunsch, semi-global");
        getContentPane().add(rdSemiglobal, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, -1, -1));

        buttonGroupAlgo.add(rdLocal);
        rdLocal.setText("Smith-Waterman, local");
        getContentPane().add(rdLocal, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, -1, -1));

        prComboScoringMatrix.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "blosum30", "blosum35", "blosum40", "blosum45", "blosum50", "blosum55", "blosum60", "blosum62", "blosum65", "blosum70", "blosum75", "blosum80", "blosum85", "blosum90", "blosum100", "pam10", "pam20", "pam30", "pam40", "pam50", "pam60", "pam70", "pam80", "pam90", "pam100", "pam110", "pam120", "pam130", "pam140", "pam150", "pam160", "pam170", "pam180", "pam190", "pam200", "pam210", "pam220", "pam230", "pam240", "pam250", "pam260", "pam270", "pam280", "pam290", "pam300", "pam310", "pam320", "pam330", "pam340", "pam350", "pam360", "pam370", "pam380", "pam390", "pam400", "pam410", "pam420", "pam430", "pam440", "pam450", "pam460", "pam470", "pam480", "pam490", "pam500" }));
        prComboScoringMatrix.setSelectedIndex(7);
        getContentPane().add(prComboScoringMatrix, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 200, 140, -1));

        lblScoringMatrix.setText("Select Scoring Matrix:");
        getContentPane().add(lblScoringMatrix, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 180, -1, -1));

        prTxtOutputFileCSV.setText("edges.csv");
        prTxtOutputFileCSV.setToolTipText("Enter output file name");
        prTxtOutputFileCSV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                prTxtOutputFileCSVKeyReleased(evt);
            }
        });
        getContentPane().add(prTxtOutputFileCSV, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 150, -1));

        lblOutputFileCSV.setText("Enter output file name (.csv):");
        getContentPane().add(lblOutputFileCSV, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, -1, -1));

        lblOutputFileCSVCopy.setText("Your output file name is:");
        getContentPane().add(lblOutputFileCSVCopy, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, -1, 20));

        prTxtOutputFileCSVCopy.setEditable(false);
        prTxtOutputFileCSVCopy.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        prTxtOutputFileCSVCopy.setText("edges.csv");
        prTxtOutputFileCSVCopy.setToolTipText("Enter output file name");
        prTxtOutputFileCSVCopy.setBorder(null);
        getContentPane().add(prTxtOutputFileCSVCopy, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 300, 110, 30));

        btnCreateInputFileDialog.setText("Create Joined FASTA File");
        btnCreateInputFileDialog.setActionCommand("");
        btnCreateInputFileDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateInputFileDialogActionPerformed(evt);
            }
        });
        getContentPane().add(btnCreateInputFileDialog, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 180, 30));

        btnRunGrappolo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRunGrappolo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/grappolo_button.png"))); // NOI18N
        btnRunGrappolo.setText("Open Grappolo");
        btnRunGrappolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunGrappoloActionPerformed(evt);
            }
        });
        getContentPane().add(btnRunGrappolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 400, 140, 80));

        prChBoxShowOutput.setSelected(true);
        prChBoxShowOutput.setText("Show diagnostic messages");
        getContentPane().add(prChBoxShowOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, -1));

        btnClear.setText("Clear output window");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 150, -1));

        btnIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AppPackage/Images/spiral_small.png"))); // NOI18N
        btnIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIcon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIconActionPerformed(evt);
            }
        });
        getContentPane().add(btnIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 80, 80));

        btnCureFiles.setText("Cure DOS Files");
        btnCureFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCureFilesActionPerformed(evt);
            }
        });
        getContentPane().add(btnCureFiles, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 140, 30));

        setSize(new java.awt.Dimension(591, 676));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnInputDataFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputDataFileActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
        if(this.txtDataFile.getText().isEmpty()){
            // Use default if none specified previously
            fc.setCurrentDirectory(new File("."+ File.separator + "Resources"));
        }else{
            // Otherwise is get current directory
            fc.setCurrentDirectory(new File(this.txtDataFile.getText()));
        }
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            this.txtDataFile.setText(selectedFile.getAbsolutePath());
            //this.outputTextArea.append("User selected file: " + selectedFile.getAbsolutePath()+ "\n\n");
        }
        else{
            //this.outputTextArea.append("User canceled action\n");
            this.txtDataFile.setText("");
        }
    }//GEN-LAST:event_btnInputDataFileActionPerformed

    private void btnOutputDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputDirActionPerformed
        //Create a file chooser
        JFileChooser fc = new JFileChooser();
        // Set default directory
        fc.setCurrentDirectory(null);
        // Allow to open both files and directories
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // User does selection --> get its value
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            this.txtOutputDir.setText(selectedFile.getAbsolutePath());
            //this.outputTextArea.append("User selected directory: " + selectedFile.getAbsolutePath()+ "\n\n");
        }
        else{
            //this.outputTextArea.append("User canceled action\n\n");
            this.txtOutputDir.setText("");
        }
        // Re-intiate label colors
        this.lblOutputDir.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnOutputDirActionPerformed

    private void btnRunPclustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunPclustActionPerformed
        // Re-intiate label colors
        this.lblInputFile.setForeground(Color.BLACK);
        this.lblOutputDir.setForeground(Color.BLACK);
        this.lblOutputFileCSV.setForeground(Color.BLACK);

        // Simple guards
        if(this.txtDataFile.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select select input data file",
                "Input File Not Selected", JOptionPane.WARNING_MESSAGE);
            this.lblInputFile.setForeground(Color.red);
            this.txtDataFile.setCaretPosition(0);
            this.txtDataFile.setText("");
            this.txtDataFile.requestFocusInWindow();
            return;
        }
        if(this.txtOutputDir.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select output folder",
                "Folder Not Selected", JOptionPane.WARNING_MESSAGE);
            this.lblOutputDir.setForeground(Color.red);
            this.txtOutputDir.setCaretPosition(0);
            this.txtOutputDir.setText("");
            this.txtOutputDir.requestFocusInWindow();
            return;
        }
        if(this.prTxtOutputFileCSV.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter output file name (.csv)",
                "Output File Not Specified", JOptionPane.WARNING_MESSAGE);
                this.lblOutputFileCSV.setForeground(Color.red);
                this.prTxtOutputFileCSV.setText("");
                this.prTxtOutputFileCSVCopy.setText("");
                this.outputFileName = "";
                this.prTxtOutputFileCSV.setCaretPosition(0);
                this.prTxtOutputFileCSV.requestFocusInWindow();
            return;
        }

        // 1. Create command string
        String cmd;
        String[] classpathEntries = System.getProperty("java.class.path").split(File.pathSeparator);
    
        // Explanaition: the filename is surrounded with double quotes on Win,
        // but on Mac empty spaces are plugged with '*'. This is Win version.
        String inputFastaFile = this.txtDataFile.getText() ; // Returns the full path.
        this.dataFile = inputFastaFile;
        
        // Get value from selected radiobutton
        String rd = "";
        if(this.rdGlobal.isSelected())
            rd = "nw";
        if(this.rdSemiglobal.isSelected())
            rd = "sg";
        if(this.rdLocal.isSelected())
            rd = "sw";
        String funcname = rd + "_stats_striped_" + this.prComboBitPrecision.getSelectedItem().toString();

        String outputFile = this.txtOutputDir.getText() + File.separator
                + this.prTxtOutputFileCSV.getText();
        // Check if output file with such name already exists
        File out = new File(this.txtOutputDir.getText() + File.separator
                + this.prTxtOutputFileCSV.getText());
        if(out.exists() && out.isFile()){
            int userResponse = JOptionPane.showConfirmDialog(this, "File "
                    + this.prTxtOutputFileCSV.getText() + " already exists. Do you want to overwrite it?",
                    "File Already Exists", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            // Option 1: User wants to overwrite the existing file
            if(userResponse == JOptionPane.YES_OPTION){
                // First, try to delete the original file
                try{
                    out.delete();
                }catch(Exception e){
                    JOptionPane.showMessageDialog(this, 
                            "Could not delete the file. Make sure the file exists and is closed." 
                                    + this.newline +  "Showing Exception 7 message: " + e, 
                            "Could Not Delete File", JOptionPane.ERROR_MESSAGE);
                }                
            }
            // Option 2: User does not want to overwrite the existing file
            if(userResponse == JOptionPane.NO_OPTION){
                this.lblOutputFileCSV.setForeground(Color.red);
                this.prTxtOutputFileCSV.setText("");
                this.prTxtOutputFileCSVCopy.setText("");
                this.outputFileName = "";
                this.prTxtOutputFileCSV.setCaretPosition(0);
                this.prTxtOutputFileCSV.requestFocusInWindow();
            }
        }

        cmd = this.theExec + " -a " + funcname 
                + " -c " + this.cutoff.getValue().toString()
                + " -e " + this.gapExtend.getValue().toString()
                + " -o " + this.gapOpen.getValue().toString()
                + " -l " + this.alignOverLongerSeq.getValue().toString()
                + " -s " + this.matchSimilarity.getValue().toString()
                + " -i " + this.optimalScoreOverSelfScore.getValue().toString()
                + " -m " + this.prComboScoringMatrix.getSelectedItem().toString()
                + " -g " + outputFile
                + " -f " + inputFastaFile;
        

        File dir = new File("."); // ADDED
        try{
            // The executable theExec is in the class folder "bin"
            cmd = dir.getCanonicalPath() + File.separator + "Resources" 
                    + File.separator + "bin/bin" + File.separator + cmd; //ADDED

        }catch(Exception e){
            JOptionPane.showMessageDialog(this, 
                    "Showing system diagnostic message of Exception 1:"
                            + this.newline + e + this.newline
                            + "Close and restart this program.", 
                    "System Failure", JOptionPane.ERROR_MESSAGE);
        }

        // 2. Call external process
        try{
            int ret = -1; // External application exit value

            Runtime runTime = Runtime.getRuntime();
            Process process = runTime.exec(cmd);

            // Getting ready to read in the program outputs
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();

            InputStreamReader isr = new InputStreamReader(inputStream);
            InputStreamReader esr = new InputStreamReader(errorStream);

            // Reading standard output
            int numChars;
            char[] plainText = new char[1024];
            StringBuffer standardOutput = new StringBuffer();

            // Start displaying busy (hourglass) cursor
            startWaitCursor();

            while ((numChars = isr.read(plainText)) > 0) {
                standardOutput.append(plainText, 0, numChars);
            }
            if(this.prChBoxShowOutput.isSelected()){
                this.outputTextArea.append(standardOutput.toString());
            }
            // Reading error output
            StringBuffer standardError = new StringBuffer();
            while ((numChars = esr.read(plainText)) > 0) {
                standardError.append(plainText, 0, numChars);
            }
            if(this.prChBoxShowOutput.isSelected()){
                if(standardError.length() > 0){
                    this.outputTextArea.append("pClust issued error message:" 
                            + this.newline + standardError.toString());
                    stopWaitCursor();
                    return;
                }
            }
            // Parse the program output to extract number of vertices and edges
            String delims = "[\\s]+"; // break on whitespace
            if(standardOutput.length() == 0){
                JOptionPane.showMessageDialog(this, 
                        "Parasail standard output is empty"
                                + this.newline 
                                + "Close and restart this program.", 
                        "Parasail Failed", JOptionPane.ERROR_MESSAGE);
                // Return to normal cursor
                stopWaitCursor();
                return;
            }
            String[] tokens = standardOutput.toString().split(delims);
            this.num_vertices = Arrays.asList(tokens).indexOf("sequences:") + 1;
            this.num_edges = Arrays.asList(tokens).indexOf("edges") + 2;
            // No checks, next lines assume valid indeces are returned
            this.num_vertices = Integer.parseInt(tokens[this.num_vertices]);
            this.num_edges = Integer.parseInt(tokens[this.num_edges]);
//            this.outputTextArea.append(this.newline + 
//                    "Edges: " + this.num_edges.toString()+
//                    this.newline+ "Vertices: " + 
//                    this.num_vertices.toString() + this.newline);


            try{
                ret = process.waitFor();
                //this.outputTextArea.append("Process exited with value " + ret);
            } catch (InterruptedException e) {
                JOptionPane.showMessageDialog(this, 
                        "Showing system diagnostic message of Exception 2:"
                                + this.newline + e + this.newline
                                + "Close and restart this program.", 
                        "System Failure", JOptionPane.ERROR_MESSAGE);
            }
        // Return to normal cursor
        stopWaitCursor();
        this.outputFileName = outputFile;
        JOptionPane.showMessageDialog(this, "File " + this.prTxtOutputFileCSV.getText() + " created successfully",
            "File created successfully", JOptionPane.INFORMATION_MESSAGE);
        }catch(IOException e){
            JOptionPane.showMessageDialog(this, 
                    "Showing system diagnostic message of Exception 3:"
                            + this.newline + e + this.newline
                            + "Close and restart this program.", 
                    "System Failure", JOptionPane.ERROR_MESSAGE);
        }
 
    }//GEN-LAST:event_btnRunPclustActionPerformed

    private void prTxtOutputFileCSVKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_prTxtOutputFileCSVKeyReleased
        this.outputFileName = this.prTxtOutputFileCSV.getText();
        this.prTxtOutputFileCSVCopy.setText(this.outputFileName);
    }//GEN-LAST:event_prTxtOutputFileCSVKeyReleased

    private void btnCreateInputFileDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateInputFileDialogActionPerformed
        final CreateInputFileDialog dlgCreateInputFile = new CreateInputFileDialog(this, true);        
        dlgCreateInputFile.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent evt){
                StartGUI.this.dataFile = dlgCreateInputFile.outputFileCompleteName;
                StartGUI.this.txtDataFile.setText(dlgCreateInputFile.outputFileCompleteName);
            }
        });
        dlgCreateInputFile.setVisible(true);
        // Re-intiate label colors
        this.lblInputFile.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnCreateInputFileDialogActionPerformed

    private void btnRunGrappoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunGrappoloActionPerformed
        GrappoloFrame fr = new GrappoloFrame();
        // Passing some variables
        // Grappolo input file is pGraph output file (.csv)
        if(!"".equals(this.outputFileName)){
            fr.inputFileName = this.outputFileName; // remove quotes on both ends
        }else{
            fr.inputFileName = "";
        }
        fr.num_seqs = this.num_vertices;
        fr.num_edges = this.num_edges;
        fr.origInputFastaFile = this.dataFile;
        fr.prTxtOriginalFastaFile.setText(fr.origInputFastaFile);
        fr.prTxtInputFileJustCreated.setText(fr.inputFileName);
        // This directory is where the current pGraph output file is stored and 
        // where Grappolo output and processed Grappolo files will be stored.
        // This directory is preset for convience for the user.
        fr.prTxtOutputDirForGrappoloFile.setText(this.txtOutputDir.getText());
        fr.prTxtOutputDirForGrappoloInputFile.setText(this.txtOutputDir.getText());
        fr.pack();
        fr.setVisible(true);
    }//GEN-LAST:event_btnRunGrappoloActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.outputTextArea.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIconActionPerformed
        JOptionPane.showMessageDialog(this, 
                "Parasail\nCopyright (2015) Battelle Memorial Institute\nAll rights reserved.", 
                "About Parasail", JOptionPane.INFORMATION_MESSAGE, 
                new ImageIcon(getClass().getResource("spiral_small.png")));
    }//GEN-LAST:event_btnIconActionPerformed

    private void btnCureFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCureFilesActionPerformed
        CureDOSFiles cureDosFiles = new CureDOSFiles(this, true);        
        cureDosFiles.pack();
        cureDosFiles.setVisible(true);
    }//GEN-LAST:event_btnCureFilesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner alignOverLongerSeq;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreateInputFileDialog;
    private javax.swing.JButton btnCureFiles;
    private javax.swing.JButton btnIcon;
    private javax.swing.JButton btnInputDataFile;
    private javax.swing.JButton btnOutputDir;
    private javax.swing.JButton btnRunGrappolo;
    private javax.swing.JButton btnRunPclust;
    private javax.swing.ButtonGroup buttonGroupAlgo;
    private javax.swing.JSpinner cutoff;
    private javax.swing.JSpinner gapExtend;
    private javax.swing.JSpinner gapOpen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAlignOverLongerSeq1;
    private javax.swing.JLabel lblBitPrecision;
    private javax.swing.JLabel lblExactMatchLength;
    private javax.swing.JLabel lblGapExtend;
    private javax.swing.JLabel lblGapOpen;
    private javax.swing.JLabel lblInputFile;
    private javax.swing.JLabel lblMatchSimilarity;
    private javax.swing.JLabel lblOptimalScore;
    private javax.swing.JLabel lblOutputDir;
    private javax.swing.JLabel lblOutputFileCSV;
    private javax.swing.JLabel lblOutputFileCSVCopy;
    private javax.swing.JLabel lblScoringMatrix;
    private javax.swing.JSpinner matchSimilarity;
    private javax.swing.JSpinner optimalScoreOverSelfScore;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JCheckBox prChBoxShowOutput;
    private javax.swing.JComboBox prComboBitPrecision;
    private javax.swing.JComboBox prComboScoringMatrix;
    private javax.swing.JTextField prTxtOutputFileCSV;
    private javax.swing.JTextField prTxtOutputFileCSVCopy;
    private javax.swing.JRadioButton rdGlobal;
    private javax.swing.JRadioButton rdLocal;
    private javax.swing.JRadioButton rdSemiglobal;
    private javax.swing.JTextField txtDataFile;
    private javax.swing.JTextField txtOutputDir;
    // End of variables declaration//GEN-END:variables
    private String theExec = "parasail_all ";
    private String dataFile = ""; // input fasta file
    private String outputFileName = ""; // output file name
    // System-independent newline character
    private final  String newline = "\n";
    private javax.swing.JDialog dlgAbout;
    private Integer num_edges = -1;
    private Integer num_vertices = -1;
}
